
stm_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b84  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b64  08007b64  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007b64  08007b64  00017b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b6c  08007b6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b6c  08007b6c  00017b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b70  08007b70  00017b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000630  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006a0  200006a0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e53  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002321  00000000  00000000  00031ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00034218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f20  00000000  00000000  000351e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224b7  00000000  00000000  00036108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013767  00000000  00000000  000585bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cefac  00000000  00000000  0006bd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013acd2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048bc  00000000  00000000  0013ad24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fc8 	.word	0x08006fc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006fc8 	.word	0x08006fc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <IMU_Initialise>:
//uint32_t gyroPrev[3];
/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uart)
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]

	 char hex[2];
	 uint8_t uartbuf[20]="  IMU ID =      "; // buffer for data
 8000dcc:	4bad      	ldr	r3, [pc, #692]	; (8001084 <IMU_Initialise+0x2c4>)
 8000dce:	f107 0418 	add.w	r4, r7, #24
 8000dd2:	461d      	mov	r5, r3
 8000dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	7023      	strb	r3, [r4, #0]
 8000ddc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000de0:	2200      	movs	r2, #0
 8000de2:	801a      	strh	r2, [r3, #0]
 8000de4:	709a      	strb	r2, [r3, #2]
     uint8_t regData;

	 dev->i2cHandle = i2cHandle;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	601a      	str	r2, [r3, #0]
	 dev->uart = uart;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	605a      	str	r2, [r3, #4]
	  buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	  buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	  ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, HAL_MAX_DELAY);

*/
	  ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	217f      	movs	r1, #127	; 0x7f
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f000 f9ba 	bl	8001170 <IMU_WriteOneByte>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4ba1      	ldr	r3, [pc, #644]	; (8001088 <IMU_Initialise+0x2c8>)
 8000e02:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK ){
 8000e04:	4ba0      	ldr	r3, [pc, #640]	; (8001088 <IMU_Initialise+0x2c8>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d007      	beq.n	8000e1c <IMU_Initialise+0x5c>
	       strcpy((char*)uartbuf, "Error 1\r\n");
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	4a9e      	ldr	r2, [pc, #632]	; (800108c <IMU_Initialise+0x2cc>)
 8000e12:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e14:	c303      	stmia	r3!, {r0, r1}
 8000e16:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e19a      	b.n	8001152 <IMU_Initialise+0x392>
	  	   }

	  //check ID
/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	  ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);  */
	  ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	f107 0317 	add.w	r3, r7, #23
 8000e22:	461a      	mov	r2, r3
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f000 f9c3 	bl	80011b0 <IMU_ReadOneByte>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b96      	ldr	r3, [pc, #600]	; (8001088 <IMU_Initialise+0x2c8>)
 8000e30:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000e32:	4b95      	ldr	r3, [pc, #596]	; (8001088 <IMU_Initialise+0x2c8>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <IMU_Initialise+0x8a>
	       strcpy((char*)uartbuf, "Error 2\r\n");
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	4a94      	ldr	r2, [pc, #592]	; (8001090 <IMU_Initialise+0x2d0>)
 8000e40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e42:	c303      	stmia	r3!, {r0, r1}
 8000e44:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000e46:	2300      	movs	r3, #0
 8000e48:	e183      	b.n	8001152 <IMU_Initialise+0x392>
	       }
	  else{
		  //sprintf(hex, "%x", buf[0]); // change to hexidecimal
		  sprintf(hex, "%x", regData); // change to hexidecimal
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e52:	4990      	ldr	r1, [pc, #576]	; (8001094 <IMU_Initialise+0x2d4>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f005 fc41 	bl	80066dc <siprintf>
	      strcpy(uartbuf, hex); // copy back to buf
 8000e5a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000e5e:	f107 0318 	add.w	r3, r7, #24
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 fc59 	bl	800671c <strcpy>
	      uartbuf[12] = uartbuf[0]-32; // change to upper case
 8000e6a:	7e3b      	ldrb	r3, [r7, #24]
 8000e6c:	3b20      	subs	r3, #32
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	      uartbuf[13] = uartbuf[1]-32;
 8000e74:	7e7b      	ldrb	r3, [r7, #25]
 8000e76:	3b20      	subs	r3, #32
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	      uartbuf[14] = '\r';
 8000e7e:	230d      	movs	r3, #13
 8000e80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	      uartbuf[15] = '\n';
 8000e84:	230a      	movs	r3, #10
 8000e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      uartbuf[16] = '\0';
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	      uartbuf[0]  = '\r';
 8000e90:	230d      	movs	r3, #13
 8000e92:	763b      	strb	r3, [r7, #24]
	      uartbuf[1]  = '\n';
 8000e94:	230a      	movs	r3, #10
 8000e96:	767b      	strb	r3, [r7, #25]
	      uartbuf[2]  = 'I';
 8000e98:	2349      	movs	r3, #73	; 0x49
 8000e9a:	76bb      	strb	r3, [r7, #26]
	      }


      // for debuggiing - send to uart and return to main to display on OLED and UART
	  HAL_UART_Transmit(dev->uart, uartbuf, strlen((char*)uartbuf), HAL_MAX_DELAY);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	685c      	ldr	r4, [r3, #4]
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff f993 	bl	80001d0 <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	f107 0118 	add.w	r1, r7, #24
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f004 fc17 	bl	80056ea <HAL_UART_Transmit>
	  //return &buf[0];

	  // Initialize
	  // Bank 0 - Reset the device and then auto selects the best available clock source
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	217f      	movs	r1, #127	; 0x7f
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f000 f955 	bl	8001170 <IMU_WriteOneByte>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <IMU_Initialise+0x2c8>)
 8000ecc:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000ece:	4b6e      	ldr	r3, [pc, #440]	; (8001088 <IMU_Initialise+0x2c8>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <IMU_Initialise+0x126>
	       strcpy((char*)uartbuf, "Error 3\r\n");
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	4a6f      	ldr	r2, [pc, #444]	; (8001098 <IMU_Initialise+0x2d8>)
 8000edc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ede:	c303      	stmia	r3!, {r0, r1}
 8000ee0:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e135      	b.n	8001152 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_ALL_RGE_RESET); // reset device - check hearder file value should be 0xF1
 8000ee6:	22f1      	movs	r2, #241	; 0xf1
 8000ee8:	2106      	movs	r1, #6
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 f940 	bl	8001170 <IMU_WriteOneByte>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b64      	ldr	r3, [pc, #400]	; (8001088 <IMU_Initialise+0x2c8>)
 8000ef6:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000ef8:	4b63      	ldr	r3, [pc, #396]	; (8001088 <IMU_Initialise+0x2c8>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00a      	beq.n	8000f16 <IMU_Initialise+0x156>
	       strcpy((char*)uartbuf, "Error 4a\r\n");
 8000f00:	f107 0318 	add.w	r3, r7, #24
 8000f04:	4a65      	ldr	r2, [pc, #404]	; (800109c <IMU_Initialise+0x2dc>)
 8000f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f08:	c303      	stmia	r3!, {r0, r1}
 8000f0a:	801a      	strh	r2, [r3, #0]
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	0c12      	lsrs	r2, r2, #16
 8000f10:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8000f12:	2300      	movs	r3, #0
 8000f14:	e11d      	b.n	8001152 <IMU_Initialise+0x392>
	       }
      HAL_Delay(10);
 8000f16:	200a      	movs	r0, #10
 8000f18:	f001 fa8a 	bl	8002430 <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2106      	movs	r1, #6
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 f925 	bl	8001170 <IMU_WriteOneByte>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b57      	ldr	r3, [pc, #348]	; (8001088 <IMU_Initialise+0x2c8>)
 8000f2c:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000f2e:	4b56      	ldr	r3, [pc, #344]	; (8001088 <IMU_Initialise+0x2c8>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00a      	beq.n	8000f4c <IMU_Initialise+0x18c>
	       strcpy((char*)uartbuf, "Error 4b\r\n");
 8000f36:	f107 0318 	add.w	r3, r7, #24
 8000f3a:	4a59      	ldr	r2, [pc, #356]	; (80010a0 <IMU_Initialise+0x2e0>)
 8000f3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f3e:	c303      	stmia	r3!, {r0, r1}
 8000f40:	801a      	strh	r2, [r3, #0]
 8000f42:	3302      	adds	r3, #2
 8000f44:	0c12      	lsrs	r2, r2, #16
 8000f46:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e102      	b.n	8001152 <IMU_Initialise+0x392>
	       }


	  // Turn off and on Accelator and Gyro - page 28
      HAL_Delay(10);
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f001 fa6f 	bl	8002430 <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_OFF); // OFF
 8000f52:	223f      	movs	r2, #63	; 0x3f
 8000f54:	2107      	movs	r1, #7
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f000 f90a 	bl	8001170 <IMU_WriteOneByte>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b49      	ldr	r3, [pc, #292]	; (8001088 <IMU_Initialise+0x2c8>)
 8000f62:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000f64:	4b48      	ldr	r3, [pc, #288]	; (8001088 <IMU_Initialise+0x2c8>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00a      	beq.n	8000f82 <IMU_Initialise+0x1c2>
	       strcpy((char*)uartbuf, "Error 5a\r\n");
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4a4c      	ldr	r2, [pc, #304]	; (80010a4 <IMU_Initialise+0x2e4>)
 8000f72:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f74:	c303      	stmia	r3!, {r0, r1}
 8000f76:	801a      	strh	r2, [r3, #0]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	0c12      	lsrs	r2, r2, #16
 8000f7c:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e0e7      	b.n	8001152 <IMU_Initialise+0x392>
	       }

      HAL_Delay(10);
 8000f82:	200a      	movs	r0, #10
 8000f84:	f001 fa54 	bl	8002430 <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_ON); // ON
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2107      	movs	r1, #7
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f000 f8ef 	bl	8001170 <IMU_WriteOneByte>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b3c      	ldr	r3, [pc, #240]	; (8001088 <IMU_Initialise+0x2c8>)
 8000f98:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <IMU_Initialise+0x2c8>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00a      	beq.n	8000fb8 <IMU_Initialise+0x1f8>
	       strcpy((char*)uartbuf, "Error 5b\r\n");
 8000fa2:	f107 0318 	add.w	r3, r7, #24
 8000fa6:	4a40      	ldr	r2, [pc, #256]	; (80010a8 <IMU_Initialise+0x2e8>)
 8000fa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000faa:	c303      	stmia	r3!, {r0, r1}
 8000fac:	801a      	strh	r2, [r3, #0]
 8000fae:	3302      	adds	r3, #2
 8000fb0:	0c12      	lsrs	r2, r2, #16
 8000fb2:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e0cc      	b.n	8001152 <IMU_Initialise+0x392>
	       }

      ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1,  REG_VAL_INT_ENABLED); // Turn on inteerup on pin INT1
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2110      	movs	r1, #16
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f8d7 	bl	8001170 <IMU_WriteOneByte>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <IMU_Initialise+0x2c8>)
 8000fc8:	701a      	strb	r2, [r3, #0]


      // Bank 2 - Gyro and Acce and start running
      /* user bank 2 register */
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 8000fca:	2220      	movs	r2, #32
 8000fcc:	217f      	movs	r1, #127	; 0x7f
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f8ce 	bl	8001170 <IMU_WriteOneByte>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <IMU_Initialise+0x2c8>)
 8000fda:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <IMU_Initialise+0x2c8>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d007      	beq.n	8000ff4 <IMU_Initialise+0x234>
	       strcpy((char*)uartbuf, "Error 6\r\n");
 8000fe4:	f107 0318 	add.w	r3, r7, #24
 8000fe8:	4a30      	ldr	r2, [pc, #192]	; (80010ac <IMU_Initialise+0x2ec>)
 8000fea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fec:	c303      	stmia	r3!, {r0, r1}
 8000fee:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e0ae      	b.n	8001152 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x04);  // pg 59  Gyro sample rate divider Output data rate = 1.11K/7 = 157 Hz
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 f8b9 	bl	8001170 <IMU_WriteOneByte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <IMU_Initialise+0x2c8>)
 8001004:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <IMU_Initialise+0x2c8>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d007      	beq.n	800101e <IMU_Initialise+0x25e>
	       strcpy((char*)uartbuf, "Error 7\r\n");
 800100e:	f107 0318 	add.w	r3, r7, #24
 8001012:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <IMU_Initialise+0x2f0>)
 8001014:	ca07      	ldmia	r2, {r0, r1, r2}
 8001016:	c303      	stmia	r3!, {r0, r1}
 8001018:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 800101a:	2300      	movs	r3, #0
 800101c:	e099      	b.n	8001152 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1, REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_500DPS | REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS
 800101e:	2233      	movs	r2, #51	; 0x33
 8001020:	2101      	movs	r1, #1
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 f8a4 	bl	8001170 <IMU_WriteOneByte>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <IMU_Initialise+0x2c8>)
 800102e:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <IMU_Initialise+0x2c8>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d007      	beq.n	8001048 <IMU_Initialise+0x288>
	       strcpy((char*)uartbuf, "Error 8\r\n");
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <IMU_Initialise+0x2f4>)
 800103e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001040:	c303      	stmia	r3!, {r0, r1}
 8001042:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001044:	2300      	movs	r3, #0
 8001046:	e084      	b.n	8001152 <IMU_Initialise+0x392>
	       }

      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2,  0x07); //  pg 63 Acce sample rate divider: ODR = 1.125KHz/7 = 161
 8001048:	2207      	movs	r2, #7
 800104a:	2111      	movs	r1, #17
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f88f 	bl	8001170 <IMU_WriteOneByte>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <IMU_Initialise+0x2c8>)
 8001058:	701a      	strb	r2, [r3, #0]
      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1,  0x00); // upper 3 bit of sample rate = 0
 800105a:	2200      	movs	r2, #0
 800105c:	2110      	movs	r1, #16
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f886 	bl	8001170 <IMU_WriteOneByte>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <IMU_Initialise+0x2c8>)
 800106a:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <IMU_Initialise+0x2c8>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d023      	beq.n	80010bc <IMU_Initialise+0x2fc>
	       strcpy((char*)uartbuf, "Error 9\r\n");
 8001074:	f107 0318 	add.w	r3, r7, #24
 8001078:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <IMU_Initialise+0x2f8>)
 800107a:	ca07      	ldmia	r2, {r0, r1, r2}
 800107c:	c303      	stmia	r3!, {r0, r1}
 800107e:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001080:	2300      	movs	r3, #0
 8001082:	e066      	b.n	8001152 <IMU_Initialise+0x392>
 8001084:	08007080 	.word	0x08007080
 8001088:	2000008c 	.word	0x2000008c
 800108c:	08006fe0 	.word	0x08006fe0
 8001090:	08006fec 	.word	0x08006fec
 8001094:	08006ff8 	.word	0x08006ff8
 8001098:	08006ffc 	.word	0x08006ffc
 800109c:	08007008 	.word	0x08007008
 80010a0:	08007014 	.word	0x08007014
 80010a4:	08007020 	.word	0x08007020
 80010a8:	0800702c 	.word	0x0800702c
 80010ac:	08007038 	.word	0x08007038
 80010b0:	08007044 	.word	0x08007044
 80010b4:	08007050 	.word	0x08007050
 80010b8:	0800705c 	.word	0x0800705c
	       }

	  // enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG, REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);
 80010bc:	2231      	movs	r2, #49	; 0x31
 80010be:	2114      	movs	r1, #20
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 f855 	bl	8001170 <IMU_WriteOneByte>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <IMU_Initialise+0x39c>)
 80010cc:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <IMU_Initialise+0x39c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00a      	beq.n	80010ec <IMU_Initialise+0x32c>
	       strcpy((char*)uartbuf, "Error 10\r\n");
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	4a21      	ldr	r2, [pc, #132]	; (8001160 <IMU_Initialise+0x3a0>)
 80010dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80010de:	c303      	stmia	r3!, {r0, r1}
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	3302      	adds	r3, #2
 80010e4:	0c12      	lsrs	r2, r2, #16
 80010e6:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80010e8:	2300      	movs	r3, #0
 80010ea:	e032      	b.n	8001152 <IMU_Initialise+0x392>
	       }

	  IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 80010ec:	2200      	movs	r2, #0
 80010ee:	2153      	movs	r1, #83	; 0x53
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f000 f83d 	bl	8001170 <IMU_WriteOneByte>



      // back to bank 0
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	217f      	movs	r1, #127	; 0x7f
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 f838 	bl	8001170 <IMU_WriteOneByte>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <IMU_Initialise+0x39c>)
 8001106:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <IMU_Initialise+0x39c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00a      	beq.n	8001126 <IMU_Initialise+0x366>
	       strcpy((char*)uartbuf, "Error 11\r\n");
 8001110:	f107 0318 	add.w	r3, r7, #24
 8001114:	4a13      	ldr	r2, [pc, #76]	; (8001164 <IMU_Initialise+0x3a4>)
 8001116:	ca07      	ldmia	r2, {r0, r1, r2}
 8001118:	c303      	stmia	r3!, {r0, r1}
 800111a:	801a      	strh	r2, [r3, #0]
 800111c:	3302      	adds	r3, #2
 800111e:	0c12      	lsrs	r2, r2, #16
 8001120:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8001122:	2300      	movs	r3, #0
 8001124:	e015      	b.n	8001152 <IMU_Initialise+0x392>
	       }
      HAL_Delay(100);
 8001126:	2064      	movs	r0, #100	; 0x64
 8001128:	f001 f982 	bl	8002430 <HAL_Delay>

      /* offset */
//      Gyro_calibrate(dev);  // calibrate the offset of the gyroscope
      gyroPosOld[0] = 0;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <IMU_Initialise+0x3a8>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
      gyroPosOld[1] = 0;
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <IMU_Initialise+0x3a8>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
      gyroPosOld[2] = 0;
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <IMU_Initialise+0x3a8>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]

      gyroNegOld[0] = 0;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <IMU_Initialise+0x3ac>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
	  gyroNegOld[1] = 0;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <IMU_Initialise+0x3ac>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
	  gyroNegOld[2] = 0;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <IMU_Initialise+0x3ac>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
      // everthing OK
      //strcpy((char*)buf, "Initialize OK\r\n");
      //return &buf;
      return 0; // 0 means 0 error
 8001150:	2300      	movs	r3, #0

}
 8001152:	4618      	mov	r0, r3
 8001154:	3730      	adds	r7, #48	; 0x30
 8001156:	46bd      	mov	sp, r7
 8001158:	bdb0      	pop	{r4, r5, r7, pc}
 800115a:	bf00      	nop
 800115c:	2000008c 	.word	0x2000008c
 8001160:	08007068 	.word	0x08007068
 8001164:	08007074 	.word	0x08007074
 8001168:	20000094 	.word	0x20000094
 800116c:	200000a0 	.word	0x200000a0

08001170 <IMU_WriteOneByte>:


HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af04      	add	r7, sp, #16
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
 800117c:	4613      	mov	r3, r2
 800117e:	70bb      	strb	r3, [r7, #2]
	 uint8_t regData = data;
 8001180:	78bb      	ldrb	r3, [r7, #2]
 8001182:	73fb      	strb	r3, [r7, #15]
	 return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	23d0      	movs	r3, #208	; 0xd0
 800118a:	b299      	uxth	r1, r3
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	b29a      	uxth	r2, r3
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	2301      	movs	r3, #1
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	f107 030f 	add.w	r3, r7, #15
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	f002 f8f1 	bl	8003388 <HAL_I2C_Mem_Write>
 80011a6:	4603      	mov	r3, r0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	460b      	mov	r3, r1
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	72fb      	strb	r3, [r7, #11]
	ret=HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	23d0      	movs	r3, #208	; 0xd0
 80011c4:	b299      	uxth	r1, r3
 80011c6:	7afb      	ldrb	r3, [r7, #11]
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	f002 f9cf 	bl	800357c <HAL_I2C_Mem_Read>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <IMU_ReadOneByte+0x44>)
 80011e4:	701a      	strb	r2, [r3, #0]
	return ret;
 80011e6:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <IMU_ReadOneByte+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000008c 	.word	0x2000008c

080011f8 <IMU_GyroReadHeading>:
//int32_t cmpfunc (const void * a, const void * b) {
//   return ( *(int32_t*)a - *(int32_t*)b );
//}

int32_t IMU_GyroReadHeading(ICM20948 *dev)
{   // return the change in value instead of current value
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    uint8_t i, u8Buf[2] = {0}; // reset to zero
 8001200:	2300      	movs	r3, #0
 8001202:	81bb      	strh	r3, [r7, #12]
    int32_t gyroRaw = {0};  // reset to zero
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
    uint32_t gyroPos, gyroNeg;
    uint32_t valPos, valNeg;
    uint32_t elapsedMs, tick;
    int32_t gyroSum = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	461a      	mov	r2, r3
 8001212:	2138      	movs	r1, #56	; 0x38
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffcb 	bl	80011b0 <IMU_ReadOneByte>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b7b      	ldr	r3, [pc, #492]	; (800140c <IMU_GyroReadHeading+0x214>)
 8001220:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	3301      	adds	r3, #1
 8001228:	461a      	mov	r2, r3
 800122a:	2137      	movs	r1, #55	; 0x37
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ffbf 	bl	80011b0 <IMU_ReadOneByte>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b75      	ldr	r3, [pc, #468]	; (800140c <IMU_GyroReadHeading+0x214>)
 8001238:	701a      	strb	r2, [r3, #0]
    if (prevTick == 0){
 800123a:	4b75      	ldr	r3, [pc, #468]	; (8001410 <IMU_GyroReadHeading+0x218>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d106      	bne.n	8001250 <IMU_GyroReadHeading+0x58>
    	prevTick = HAL_GetTick();
 8001242:	f001 f8e9 	bl	8002418 <HAL_GetTick>
 8001246:	4603      	mov	r3, r0
 8001248:	4a71      	ldr	r2, [pc, #452]	; (8001410 <IMU_GyroReadHeading+0x218>)
 800124a:	6013      	str	r3, [r2, #0]
    	return 0;
 800124c:	2300      	movs	r3, #0
 800124e:	e11a      	b.n	8001486 <IMU_GyroReadHeading+0x28e>
    }
    tick = HAL_GetTick();
 8001250:	f001 f8e2 	bl	8002418 <HAL_GetTick>
 8001254:	6178      	str	r0, [r7, #20]
    elapsedMs = tick-prevTick;
 8001256:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <IMU_GyroReadHeading+0x218>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	613b      	str	r3, [r7, #16]
    prevTick = tick;
 8001260:	4a6b      	ldr	r2, [pc, #428]	; (8001410 <IMU_GyroReadHeading+0x218>)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	6013      	str	r3, [r2, #0]

    gyroRaw = (u8Buf[1]<<8)|u8Buf[0] -  gyro_offset[2];
 8001266:	7b7b      	ldrb	r3, [r7, #13]
 8001268:	021a      	lsls	r2, r3, #8
 800126a:	7b3b      	ldrb	r3, [r7, #12]
 800126c:	4619      	mov	r1, r3
 800126e:	4b69      	ldr	r3, [pc, #420]	; (8001414 <IMU_GyroReadHeading+0x21c>)
 8001270:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001274:	1acb      	subs	r3, r1, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	61fb      	str	r3, [r7, #28]
    if(gyroRaw < 0x8000){
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001280:	da04      	bge.n	800128c <IMU_GyroReadHeading+0x94>
//    	gyroRaw = gyroRaw*0.01525878906*elapsedMs/10*2.546257;
    	gyroNeg = gyroRaw;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
		gyroPos = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800128a:	e006      	b.n	800129a <IMU_GyroReadHeading+0xa2>

    }
    else{
//    	gyroRaw = (65535 - gyroRaw)*0.01525878906*elapsedMs/10*2.546257;
		gyroNeg = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
		gyroPos = 65535 - gyroRaw;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001296:	33ff      	adds	r3, #255	; 0xff
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    // Median Filtering
    gyroNegOld[2] = gyroNegOld[1];
 800129a:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <IMU_GyroReadHeading+0x220>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4a5e      	ldr	r2, [pc, #376]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012a0:	6093      	str	r3, [r2, #8]
	gyroPosOld[2] = gyroPosOld[1];
 80012a2:	4b5e      	ldr	r3, [pc, #376]	; (800141c <IMU_GyroReadHeading+0x224>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a5d      	ldr	r2, [pc, #372]	; (800141c <IMU_GyroReadHeading+0x224>)
 80012a8:	6093      	str	r3, [r2, #8]

	gyroNegOld[1] = gyroNegOld[0];
 80012aa:	4b5b      	ldr	r3, [pc, #364]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a5a      	ldr	r2, [pc, #360]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012b0:	6053      	str	r3, [r2, #4]
	gyroPosOld[1] = gyroPosOld[0];
 80012b2:	4b5a      	ldr	r3, [pc, #360]	; (800141c <IMU_GyroReadHeading+0x224>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a59      	ldr	r2, [pc, #356]	; (800141c <IMU_GyroReadHeading+0x224>)
 80012b8:	6053      	str	r3, [r2, #4]

	gyroNegOld[0] = gyroNeg;
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	4a56      	ldr	r2, [pc, #344]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012be:	6013      	str	r3, [r2, #0]
	gyroPosOld[0] = gyroPos;
 80012c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c2:	4a56      	ldr	r2, [pc, #344]	; (800141c <IMU_GyroReadHeading+0x224>)
 80012c4:	6013      	str	r3, [r2, #0]

	if(gyroNegOld[1] <= gyroNegOld[0] && gyroNegOld[1] >= gyroNegOld[2])valNeg = gyroNegOld[1];
 80012c6:	4b54      	ldr	r3, [pc, #336]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4b53      	ldr	r3, [pc, #332]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	dc09      	bgt.n	80012e6 <IMU_GyroReadHeading+0xee>
 80012d2:	4b51      	ldr	r3, [pc, #324]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4b50      	ldr	r3, [pc, #320]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	429a      	cmp	r2, r3
 80012dc:	db03      	blt.n	80012e6 <IMU_GyroReadHeading+0xee>
 80012de:	4b4e      	ldr	r3, [pc, #312]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	623b      	str	r3, [r7, #32]
 80012e4:	e042      	b.n	800136c <IMU_GyroReadHeading+0x174>
	else if(gyroNegOld[1] <= gyroNegOld[2] && gyroNegOld[1] >= gyroNegOld[0])valNeg = gyroNegOld[1];
 80012e6:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dc09      	bgt.n	8001306 <IMU_GyroReadHeading+0x10e>
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4b48      	ldr	r3, [pc, #288]	; (8001418 <IMU_GyroReadHeading+0x220>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	db03      	blt.n	8001306 <IMU_GyroReadHeading+0x10e>
 80012fe:	4b46      	ldr	r3, [pc, #280]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	623b      	str	r3, [r7, #32]
 8001304:	e032      	b.n	800136c <IMU_GyroReadHeading+0x174>

	else if(gyroNegOld[0] <= gyroNegOld[2] && gyroNegOld[0] >= gyroNegOld[1])valNeg = gyroNegOld[0];
 8001306:	4b44      	ldr	r3, [pc, #272]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b43      	ldr	r3, [pc, #268]	; (8001418 <IMU_GyroReadHeading+0x220>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	429a      	cmp	r2, r3
 8001310:	dc09      	bgt.n	8001326 <IMU_GyroReadHeading+0x12e>
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b40      	ldr	r3, [pc, #256]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	db03      	blt.n	8001326 <IMU_GyroReadHeading+0x12e>
 800131e:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	623b      	str	r3, [r7, #32]
 8001324:	e022      	b.n	800136c <IMU_GyroReadHeading+0x174>
	else if(gyroNegOld[0] <= gyroNegOld[2] && gyroNegOld[0] >= gyroNegOld[1])valNeg = gyroNegOld[0];
 8001326:	4b3c      	ldr	r3, [pc, #240]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <IMU_GyroReadHeading+0x220>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	429a      	cmp	r2, r3
 8001330:	dc09      	bgt.n	8001346 <IMU_GyroReadHeading+0x14e>
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	db03      	blt.n	8001346 <IMU_GyroReadHeading+0x14e>
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	623b      	str	r3, [r7, #32]
 8001344:	e012      	b.n	800136c <IMU_GyroReadHeading+0x174>

	else if(gyroNegOld[2] <= gyroNegOld[0] && gyroNegOld[2] >= gyroNegOld[1])valNeg = gyroNegOld[2];
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	4b33      	ldr	r3, [pc, #204]	; (8001418 <IMU_GyroReadHeading+0x220>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	dc09      	bgt.n	8001366 <IMU_GyroReadHeading+0x16e>
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	4b30      	ldr	r3, [pc, #192]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	db03      	blt.n	8001366 <IMU_GyroReadHeading+0x16e>
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	623b      	str	r3, [r7, #32]
 8001364:	e002      	b.n	800136c <IMU_GyroReadHeading+0x174>
	else valNeg = gyroNegOld[2];
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <IMU_GyroReadHeading+0x220>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	623b      	str	r3, [r7, #32]

	if(gyroPosOld[1] <= gyroPosOld[0] && gyroPosOld[1] >= gyroPosOld[2])valPos = gyroPosOld[1];
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <IMU_GyroReadHeading+0x224>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <IMU_GyroReadHeading+0x224>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	dc09      	bgt.n	800138c <IMU_GyroReadHeading+0x194>
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <IMU_GyroReadHeading+0x224>)
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <IMU_GyroReadHeading+0x224>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	429a      	cmp	r2, r3
 8001382:	db03      	blt.n	800138c <IMU_GyroReadHeading+0x194>
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <IMU_GyroReadHeading+0x224>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
 800138a:	e04c      	b.n	8001426 <IMU_GyroReadHeading+0x22e>
	else if(gyroPosOld[1] <= gyroPosOld[2] && gyroPosOld[1] >= gyroPosOld[0])valPos = gyroPosOld[1];
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <IMU_GyroReadHeading+0x224>)
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <IMU_GyroReadHeading+0x224>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	429a      	cmp	r2, r3
 8001396:	dc09      	bgt.n	80013ac <IMU_GyroReadHeading+0x1b4>
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <IMU_GyroReadHeading+0x224>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <IMU_GyroReadHeading+0x224>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	db03      	blt.n	80013ac <IMU_GyroReadHeading+0x1b4>
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
 80013aa:	e03c      	b.n	8001426 <IMU_GyroReadHeading+0x22e>

	else if(gyroPosOld[0] <= gyroPosOld[2] && gyroPosOld[0] >= gyroPosOld[1])valPos = gyroPosOld[0];
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dc09      	bgt.n	80013cc <IMU_GyroReadHeading+0x1d4>
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	db03      	blt.n	80013cc <IMU_GyroReadHeading+0x1d4>
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	e02c      	b.n	8001426 <IMU_GyroReadHeading+0x22e>
	else if(gyroPosOld[0] <= gyroPosOld[2] && gyroPosOld[0] >= gyroPosOld[1])valPos = gyroPosOld[0];
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dc09      	bgt.n	80013ec <IMU_GyroReadHeading+0x1f4>
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	db03      	blt.n	80013ec <IMU_GyroReadHeading+0x1f4>
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ea:	e01c      	b.n	8001426 <IMU_GyroReadHeading+0x22e>

	else if(gyroPosOld[2] <= gyroPosOld[0] && gyroPosOld[2] >= gyroPosOld[1])valPos = gyroPosOld[2];
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dc13      	bgt.n	8001420 <IMU_GyroReadHeading+0x228>
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <IMU_GyroReadHeading+0x224>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	db0d      	blt.n	8001420 <IMU_GyroReadHeading+0x228>
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <IMU_GyroReadHeading+0x224>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	e00c      	b.n	8001426 <IMU_GyroReadHeading+0x22e>
 800140c:	2000008c 	.word	0x2000008c
 8001410:	20000090 	.word	0x20000090
 8001414:	200000ac 	.word	0x200000ac
 8001418:	200000a0 	.word	0x200000a0
 800141c:	20000094 	.word	0x20000094
	else valPos = gyroPosOld[2];
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <IMU_GyroReadHeading+0x298>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
//    			valPos = gyroNegOld - gyroNeg;
//    			valNeg = 0;
//    		}
//    	}
//    }
	dev->gyro[2] = ((double)((int32_t)valPos - (int32_t)valNeg - (int32_t)gyro_offset_f)*0.01525878906f*elapsedMs/1000);
 8001426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	1ad2      	subs	r2, r2, r3
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <IMU_GyroReadHeading+0x29c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f876 	bl	8000524 <__aeabi_i2d>
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <IMU_GyroReadHeading+0x2a0>)
 800143e:	f7ff f8db 	bl	80005f8 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4614      	mov	r4, r2
 8001448:	461d      	mov	r5, r3
 800144a:	6938      	ldr	r0, [r7, #16]
 800144c:	f7ff f85a 	bl	8000504 <__aeabi_ui2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7ff f8ce 	bl	80005f8 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <IMU_GyroReadHeading+0x2a4>)
 800146a:	f7ff f9ef 	bl	800084c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fad1 	bl	8000a1c <__aeabi_d2f>
 800147a:	4602      	mov	r2, r0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	61da      	str	r2, [r3, #28]
//		heading_f = heading_f - 360;
//	}
//	while(heading_f < 0){
//		heading_f = heading_f + 360;
//	}
	return (int32_t)valPos - (int32_t)valNeg;
 8001480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	1ad3      	subs	r3, r2, r3
//    if(heading >= 122850) heading = heading - 122850;
//
////    heading %= 360;
//	return heading*0.29304029304;

}
 8001486:	4618      	mov	r0, r3
 8001488:	3730      	adds	r7, #48	; 0x30
 800148a:	46bd      	mov	sp, r7
 800148c:	bdb0      	pop	{r4, r5, r7, pc}
 800148e:	bf00      	nop
 8001490:	20000094 	.word	0x20000094
 8001494:	200000b4 	.word	0x200000b4
 8001498:	3f8f4000 	.word	0x3f8f4000
 800149c:	408f4000 	.word	0x408f4000

080014a0 <Gyro_calibrateHeading>:

void Gyro_calibrateHeading(ICM20948 *dev, uint8_t ticks)  // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
    int32_t offset_local = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
    int16_t i;
    for (i=0; i< 512; i++){
 80014b0:	2300      	movs	r3, #0
 80014b2:	817b      	strh	r3, [r7, #10]
 80014b4:	e00c      	b.n	80014d0 <Gyro_calibrateHeading+0x30>
		IMU_GyroReadHeading(dev);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fe9e 	bl	80011f8 <IMU_GyroReadHeading>
		HAL_Delay(ticks); // wait for 10msec
 80014bc:	78fb      	ldrb	r3, [r7, #3]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 ffb6 	bl	8002430 <HAL_Delay>
    for (i=0; i< 512; i++){
 80014c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	817b      	strh	r3, [r7, #10]
 80014d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014d8:	dbed      	blt.n	80014b6 <Gyro_calibrateHeading+0x16>
	}

    for (i=0; i< 2048; i++){
 80014da:	2300      	movs	r3, #0
 80014dc:	817b      	strh	r3, [r7, #10]
 80014de:	e010      	b.n	8001502 <Gyro_calibrateHeading+0x62>
    	offset_local = offset_local + IMU_GyroReadHeading(dev);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fe89 	bl	80011f8 <IMU_GyroReadHeading>
 80014e6:	4602      	mov	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
//		offset_local = offset_local + (double)dev->gyro[2]/64.0;
    	HAL_Delay(ticks); // wait for 10msec
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 ff9d 	bl	8002430 <HAL_Delay>
    for (i=0; i< 2048; i++){
 80014f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	b29b      	uxth	r3, r3
 8001500:	817b      	strh	r3, [r7, #10]
 8001502:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800150a:	dbe9      	blt.n	80014e0 <Gyro_calibrateHeading+0x40>
    }

    gyro_offset_f = offset_local>>11;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	12db      	asrs	r3, r3, #11
 8001510:	4a02      	ldr	r2, [pc, #8]	; (800151c <Gyro_calibrateHeading+0x7c>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200000b4 	.word	0x200000b4

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b092      	sub	sp, #72	; 0x48
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001526:	f000 ff11 	bl	800234c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152a:	f000 f851 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152e:	f000 fabf 	bl	8001ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001532:	f000 fa9d 	bl	8001a70 <MX_DMA_Init>
  MX_TIM8_Init();
 8001536:	f000 f9c7 	bl	80018c8 <MX_TIM8_Init>
  MX_TIM1_Init();
 800153a:	f000 f8d5 	bl	80016e8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800153e:	f000 fa6d 	bl	8001a1c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001542:	f000 f96d 	bl	8001820 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001546:	f000 f8a1 	bl	800168c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ICM20948 imu;
  uint8_t *status = IMU_Initialise(&imu, &hi2c1, &huart3);
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <main+0xa0>)
 8001550:	491c      	ldr	r1, [pc, #112]	; (80015c4 <main+0xa4>)
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fc34 	bl	8000dc0 <IMU_Initialise>
 8001558:	6478      	str	r0, [r7, #68]	; 0x44
  uint8_t dispBuff[20], sbuf[10];
  /* USER CODE END 2 */
  sprintf(dispBuff, "Calibr Gyro.."); // Prints current heading angle (x1000)
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	491a      	ldr	r1, [pc, #104]	; (80015c8 <main+0xa8>)
 8001560:	4618      	mov	r0, r3
 8001562:	f005 f8bb 	bl	80066dc <siprintf>
  OLED_ShowString(10, 30, dispBuff);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	461a      	mov	r2, r3
 800156c:	211e      	movs	r1, #30
 800156e:	200a      	movs	r0, #10
 8001570:	f000 fc96 	bl	8001ea0 <OLED_ShowString>
	//  OLED_Refresh_Gram();
  HAL_Delay(2000);
 8001574:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001578:	f000 ff5a 	bl	8002430 <HAL_Delay>
  Gyro_calibrateHeading(&imu, 21); // Sample gyro data every 21ms for 1024 samples and use as offset
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	2115      	movs	r1, #21
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff8c 	bl	80014a0 <Gyro_calibrateHeading>
  HAL_Delay(2000);
 8001588:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800158c:	f000 ff50 	bl	8002430 <HAL_Delay>
  {
    /* USER CODE END WHILE */
//	  sprintf(sbuf, "%7.2f ", (int)(current_angle*100));
//	  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 8, HAL_MAX_DELAY);
    /* USER CODE BEGIN 3 */
	  IMU_GyroReadHeading(&imu);
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fe2f 	bl	80011f8 <IMU_GyroReadHeading>
	  sprintf(sbuf, "%7.2f ", imu.gyro[2]); // @suppress("Float formatting support")
 800159a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffd3 	bl	8000548 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4638      	mov	r0, r7
 80015a8:	4908      	ldr	r1, [pc, #32]	; (80015cc <main+0xac>)
 80015aa:	f005 f897 	bl	80066dc <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 8, HAL_MAX_DELAY);
 80015ae:	4639      	mov	r1, r7
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
 80015b4:	2208      	movs	r2, #8
 80015b6:	4802      	ldr	r0, [pc, #8]	; (80015c0 <main+0xa0>)
 80015b8:	f004 f897 	bl	80056ea <HAL_UART_Transmit>
	  IMU_GyroReadHeading(&imu);
 80015bc:	e7e8      	b.n	8001590 <main+0x70>
 80015be:	bf00      	nop
 80015c0:	200001e4 	.word	0x200001e4
 80015c4:	200000b8 	.word	0x200000b8
 80015c8:	08007094 	.word	0x08007094
 80015cc:	080070a4 	.word	0x080070a4

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	2230      	movs	r2, #48	; 0x30
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f005 f874 	bl	80066cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <SystemClock_Config+0xb4>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a21      	ldr	r2, [pc, #132]	; (8001684 <SystemClock_Config+0xb4>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <SystemClock_Config+0xb4>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <SystemClock_Config+0xb8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <SystemClock_Config+0xb8>)
 800161a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <SystemClock_Config+0xb8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001634:	2310      	movs	r3, #16
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001638:	2300      	movs	r3, #0
 800163a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163c:	f107 0320 	add.w	r3, r7, #32
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fd1d 	bl	8004080 <HAL_RCC_OscConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800164c:	f000 faae 	bl	8001bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001650:	230f      	movs	r3, #15
 8001652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f002 ff80 	bl	8004570 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001676:	f000 fa99 	bl	8001bac <Error_Handler>
  }
}
 800167a:	bf00      	nop
 800167c:	3750      	adds	r7, #80	; 0x50
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_I2C1_Init+0x50>)
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <MX_I2C1_Init+0x54>)
 8001694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_I2C1_Init+0x50>)
 8001698:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <MX_I2C1_Init+0x58>)
 800169a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_I2C1_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_I2C1_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_I2C1_Init+0x50>)
 80016aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_I2C1_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_I2C1_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_I2C1_Init+0x50>)
 80016ca:	f001 fd19 	bl	8003100 <HAL_I2C_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016d4:	f000 fa6a 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200000b8 	.word	0x200000b8
 80016e0:	40005400 	.word	0x40005400
 80016e4:	000186a0 	.word	0x000186a0

080016e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b096      	sub	sp, #88	; 0x58
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2220      	movs	r2, #32
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f004 ffd3 	bl	80066cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001726:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <MX_TIM1_Init+0x130>)
 8001728:	4a3c      	ldr	r2, [pc, #240]	; (800181c <MX_TIM1_Init+0x134>)
 800172a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800172c:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <MX_TIM1_Init+0x130>)
 800172e:	22a0      	movs	r2, #160	; 0xa0
 8001730:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b39      	ldr	r3, [pc, #228]	; (8001818 <MX_TIM1_Init+0x130>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001738:	4b37      	ldr	r3, [pc, #220]	; (8001818 <MX_TIM1_Init+0x130>)
 800173a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800173e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <MX_TIM1_Init+0x130>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <MX_TIM1_Init+0x130>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <MX_TIM1_Init+0x130>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001752:	4831      	ldr	r0, [pc, #196]	; (8001818 <MX_TIM1_Init+0x130>)
 8001754:	f003 f8ec 	bl	8004930 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800175e:	f000 fa25 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001768:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800176c:	4619      	mov	r1, r3
 800176e:	482a      	ldr	r0, [pc, #168]	; (8001818 <MX_TIM1_Init+0x130>)
 8001770:	f003 faee 	bl	8004d50 <HAL_TIM_ConfigClockSource>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800177a:	f000 fa17 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800177e:	4826      	ldr	r0, [pc, #152]	; (8001818 <MX_TIM1_Init+0x130>)
 8001780:	f003 f925 	bl	80049ce <HAL_TIM_PWM_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800178a:	f000 fa0f 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001796:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800179a:	4619      	mov	r1, r3
 800179c:	481e      	ldr	r0, [pc, #120]	; (8001818 <MX_TIM1_Init+0x130>)
 800179e:	f003 fe89 	bl	80054b4 <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017a8:	f000 fa00 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ac:	2360      	movs	r3, #96	; 0x60
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	220c      	movs	r2, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	4812      	ldr	r0, [pc, #72]	; (8001818 <MX_TIM1_Init+0x130>)
 80017ce:	f003 f9fd 	bl	8004bcc <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80017d8:	f000 f9e8 	bl	8001bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <MX_TIM1_Init+0x130>)
 8001800:	f003 fed4 	bl	80055ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800180a:	f000 f9cf 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	3758      	adds	r7, #88	; 0x58
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000010c 	.word	0x2000010c
 800181c:	40010000 	.word	0x40010000

08001820 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	; 0x30
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	2224      	movs	r2, #36	; 0x24
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f004 ff4c 	bl	80066cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_TIM3_Init+0xa0>)
 800183e:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <MX_TIM3_Init+0xa4>)
 8001840:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_TIM3_Init+0xa0>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_TIM3_Init+0xa0>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_TIM3_Init+0xa0>)
 8001850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001854:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM3_Init+0xa0>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_TIM3_Init+0xa0>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001862:	2303      	movs	r3, #3
 8001864:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800186a:	2301      	movs	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001872:	230a      	movs	r3, #10
 8001874:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800187a:	2301      	movs	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001882:	230a      	movs	r3, #10
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_TIM3_Init+0xa0>)
 800188e:	f003 f8f7 	bl	8004a80 <HAL_TIM_Encoder_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001898:	f000 f988 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_TIM3_Init+0xa0>)
 80018aa:	f003 fe03 	bl	80054b4 <HAL_TIMEx_MasterConfigSynchronization>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018b4:	f000 f97a 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3730      	adds	r7, #48	; 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000154 	.word	0x20000154
 80018c4:	40000400 	.word	0x40000400

080018c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b096      	sub	sp, #88	; 0x58
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2220      	movs	r2, #32
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f004 fee3 	bl	80066cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001906:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <MX_TIM8_Init+0x14c>)
 8001908:	4a43      	ldr	r2, [pc, #268]	; (8001a18 <MX_TIM8_Init+0x150>)
 800190a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800190c:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <MX_TIM8_Init+0x14c>)
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <MX_TIM8_Init+0x14c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001918:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <MX_TIM8_Init+0x14c>)
 800191a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800191e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <MX_TIM8_Init+0x14c>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <MX_TIM8_Init+0x14c>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <MX_TIM8_Init+0x14c>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001932:	4838      	ldr	r0, [pc, #224]	; (8001a14 <MX_TIM8_Init+0x14c>)
 8001934:	f002 fffc 	bl	8004930 <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800193e:	f000 f935 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001948:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800194c:	4619      	mov	r1, r3
 800194e:	4831      	ldr	r0, [pc, #196]	; (8001a14 <MX_TIM8_Init+0x14c>)
 8001950:	f003 f9fe 	bl	8004d50 <HAL_TIM_ConfigClockSource>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800195a:	f000 f927 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800195e:	482d      	ldr	r0, [pc, #180]	; (8001a14 <MX_TIM8_Init+0x14c>)
 8001960:	f003 f835 	bl	80049ce <HAL_TIM_PWM_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800196a:	f000 f91f 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001976:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800197a:	4619      	mov	r1, r3
 800197c:	4825      	ldr	r0, [pc, #148]	; (8001a14 <MX_TIM8_Init+0x14c>)
 800197e:	f003 fd99 	bl	80054b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001988:	f000 f910 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198c:	2360      	movs	r3, #96	; 0x60
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001998:	2300      	movs	r3, #0
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4818      	ldr	r0, [pc, #96]	; (8001a14 <MX_TIM8_Init+0x14c>)
 80019b2:	f003 f90b 	bl	8004bcc <HAL_TIM_PWM_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80019bc:	f000 f8f6 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	2204      	movs	r2, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4812      	ldr	r0, [pc, #72]	; (8001a14 <MX_TIM8_Init+0x14c>)
 80019ca:	f003 f8ff 	bl	8004bcc <HAL_TIM_PWM_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80019d4:	f000 f8ea 	bl	8001bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <MX_TIM8_Init+0x14c>)
 80019fc:	f003 fdd6 	bl	80055ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001a06:	f000 f8d1 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	3758      	adds	r7, #88	; 0x58
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000019c 	.word	0x2000019c
 8001a18:	40010400 	.word	0x40010400

08001a1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <MX_USART3_UART_Init+0x50>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_USART3_UART_Init+0x4c>)
 8001a54:	f003 fdfc 	bl	8005650 <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a5e:	f000 f8a5 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200001e4 	.word	0x200001e4
 8001a6c:	40004800 	.word	0x40004800

08001a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_DMA_Init+0x3c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <MX_DMA_Init+0x3c>)
 8001a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_DMA_Init+0x3c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	200c      	movs	r0, #12
 8001a98:	f000 fdc9 	bl	800262e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a9c:	200c      	movs	r0, #12
 8001a9e:	f000 fde2 	bl	8002666 <HAL_NVIC_EnableIRQ>

}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a34      	ldr	r2, [pc, #208]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001ad0:	f043 0310 	orr.w	r3, r3, #16
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a2d      	ldr	r2, [pc, #180]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_GPIO_Init+0xf0>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001b52:	2200      	movs	r2, #0
 8001b54:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001b58:	4812      	ldr	r0, [pc, #72]	; (8001ba4 <MX_GPIO_Init+0xf4>)
 8001b5a:	f001 fab7 	bl	80030cc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001b5e:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001b62:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <MX_GPIO_Init+0xf4>)
 8001b78:	f001 f90c 	bl	8002d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_GPIO_Init+0xf8>)
 8001b92:	f001 f8ff 	bl	8002d94 <HAL_GPIO_Init>

}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40020c00 	.word	0x40020c00

08001bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <Error_Handler+0x8>
	...

08001bb8 <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	460a      	mov	r2, r1
 8001bc2:	71fb      	strb	r3, [r7, #7]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d106      	bne.n	8001bdc <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd4:	481c      	ldr	r0, [pc, #112]	; (8001c48 <OLED_WR_Byte+0x90>)
 8001bd6:	f001 fa79 	bl	80030cc <HAL_GPIO_WritePin>
 8001bda:	e005      	b.n	8001be8 <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be2:	4819      	ldr	r0, [pc, #100]	; (8001c48 <OLED_WR_Byte+0x90>)
 8001be4:	f001 fa72 	bl	80030cc <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e01e      	b.n	8001c2c <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	4815      	ldr	r0, [pc, #84]	; (8001c48 <OLED_WR_Byte+0x90>)
 8001bf4:	f001 fa6a 	bl	80030cc <HAL_GPIO_WritePin>
		if(dat & 0x80)
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	da05      	bge.n	8001c0c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8001c00:	2201      	movs	r2, #1
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	4810      	ldr	r0, [pc, #64]	; (8001c48 <OLED_WR_Byte+0x90>)
 8001c06:	f001 fa61 	bl	80030cc <HAL_GPIO_WritePin>
 8001c0a:	e004      	b.n	8001c16 <OLED_WR_Byte+0x5e>
		else
		   OLED_SDIN_Clr();
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <OLED_WR_Byte+0x90>)
 8001c12:	f001 fa5b 	bl	80030cc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8001c16:	2201      	movs	r2, #1
 8001c18:	2120      	movs	r1, #32
 8001c1a:	480b      	ldr	r0, [pc, #44]	; (8001c48 <OLED_WR_Byte+0x90>)
 8001c1c:	f001 fa56 	bl	80030cc <HAL_GPIO_WritePin>
		dat <<= 1;
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	2b07      	cmp	r3, #7
 8001c30:	d9dd      	bls.n	8001bee <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 8001c32:	2201      	movs	r2, #1
 8001c34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <OLED_WR_Byte+0x90>)
 8001c3a:	f001 fa47 	bl	80030cc <HAL_GPIO_WritePin>
} 
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000

08001c4c <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	71fb      	strb	r3, [r7, #7]
 8001c56:	e026      	b.n	8001ca6 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	3b50      	subs	r3, #80	; 0x50
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ffa9 	bl	8001bb8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 8001c66:	2100      	movs	r1, #0
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff ffa5 	bl	8001bb8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2010      	movs	r0, #16
 8001c72:	f7ff ffa1 	bl	8001bb8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8001c76:	2300      	movs	r3, #0
 8001c78:	71bb      	strb	r3, [r7, #6]
 8001c7a:	e00d      	b.n	8001c98 <OLED_Refresh_Gram+0x4c>
 8001c7c:	79ba      	ldrb	r2, [r7, #6]
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	490d      	ldr	r1, [pc, #52]	; (8001cb8 <OLED_Refresh_Gram+0x6c>)
 8001c82:	00d2      	lsls	r2, r2, #3
 8001c84:	440a      	add	r2, r1
 8001c86:	4413      	add	r3, r2
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff93 	bl	8001bb8 <OLED_WR_Byte>
 8001c92:	79bb      	ldrb	r3, [r7, #6]
 8001c94:	3301      	adds	r3, #1
 8001c96:	71bb      	strb	r3, [r7, #6]
 8001c98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	daed      	bge.n	8001c7c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	71fb      	strb	r3, [r7, #7]
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b07      	cmp	r3, #7
 8001caa:	d9d5      	bls.n	8001c58 <OLED_Refresh_Gram+0xc>
	}
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000288 	.word	0x20000288

08001cbc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71fb      	strb	r3, [r7, #7]
 8001cc6:	e014      	b.n	8001cf2 <OLED_Clear+0x36>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	71bb      	strb	r3, [r7, #6]
 8001ccc:	e00a      	b.n	8001ce4 <OLED_Clear+0x28>
 8001cce:	79ba      	ldrb	r2, [r7, #6]
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	490c      	ldr	r1, [pc, #48]	; (8001d04 <OLED_Clear+0x48>)
 8001cd4:	00d2      	lsls	r2, r2, #3
 8001cd6:	440a      	add	r2, r1
 8001cd8:	4413      	add	r3, r2
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	79bb      	ldrb	r3, [r7, #6]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	71bb      	strb	r3, [r7, #6]
 8001ce4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	daf0      	bge.n	8001cce <OLED_Clear+0x12>
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	2b07      	cmp	r3, #7
 8001cf6:	d9e7      	bls.n	8001cc8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8001cf8:	f7ff ffa8 	bl	8001c4c <OLED_Refresh_Gram>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000288 	.word	0x20000288

08001d08 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
 8001d12:	460b      	mov	r3, r1
 8001d14:	71bb      	strb	r3, [r7, #6]
 8001d16:	4613      	mov	r3, r2
 8001d18:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db41      	blt.n	8001daa <OLED_DrawPoint+0xa2>
 8001d26:	79bb      	ldrb	r3, [r7, #6]
 8001d28:	2b3f      	cmp	r3, #63	; 0x3f
 8001d2a:	d83e      	bhi.n	8001daa <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8001d2c:	79bb      	ldrb	r3, [r7, #6]
 8001d2e:	08db      	lsrs	r3, r3, #3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001d40:	7b7b      	ldrb	r3, [r7, #13]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2201      	movs	r2, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8001d4e:	797b      	ldrb	r3, [r7, #5]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d012      	beq.n	8001d7a <OLED_DrawPoint+0x72>
 8001d54:	79fa      	ldrb	r2, [r7, #7]
 8001d56:	7bbb      	ldrb	r3, [r7, #14]
 8001d58:	4917      	ldr	r1, [pc, #92]	; (8001db8 <OLED_DrawPoint+0xb0>)
 8001d5a:	00d2      	lsls	r2, r2, #3
 8001d5c:	440a      	add	r2, r1
 8001d5e:	4413      	add	r3, r2
 8001d60:	7818      	ldrb	r0, [r3, #0]
 8001d62:	79fa      	ldrb	r2, [r7, #7]
 8001d64:	7bbb      	ldrb	r3, [r7, #14]
 8001d66:	7bf9      	ldrb	r1, [r7, #15]
 8001d68:	4301      	orrs	r1, r0
 8001d6a:	b2c8      	uxtb	r0, r1
 8001d6c:	4912      	ldr	r1, [pc, #72]	; (8001db8 <OLED_DrawPoint+0xb0>)
 8001d6e:	00d2      	lsls	r2, r2, #3
 8001d70:	440a      	add	r2, r1
 8001d72:	4413      	add	r3, r2
 8001d74:	4602      	mov	r2, r0
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e018      	b.n	8001dac <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8001d7a:	79fa      	ldrb	r2, [r7, #7]
 8001d7c:	7bbb      	ldrb	r3, [r7, #14]
 8001d7e:	490e      	ldr	r1, [pc, #56]	; (8001db8 <OLED_DrawPoint+0xb0>)
 8001d80:	00d2      	lsls	r2, r2, #3
 8001d82:	440a      	add	r2, r1
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b25a      	sxtb	r2, r3
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	4013      	ands	r3, r2
 8001d94:	b259      	sxtb	r1, r3
 8001d96:	79fa      	ldrb	r2, [r7, #7]
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
 8001d9a:	b2c8      	uxtb	r0, r1
 8001d9c:	4906      	ldr	r1, [pc, #24]	; (8001db8 <OLED_DrawPoint+0xb0>)
 8001d9e:	00d2      	lsls	r2, r2, #3
 8001da0:	440a      	add	r2, r1
 8001da2:	4413      	add	r3, r2
 8001da4:	4602      	mov	r2, r0
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e000      	b.n	8001dac <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8001daa:	bf00      	nop
}
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000288 	.word	0x20000288

08001dbc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	4608      	mov	r0, r1
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4623      	mov	r3, r4
 8001dcc:	71fb      	strb	r3, [r7, #7]
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71bb      	strb	r3, [r7, #6]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	717b      	strb	r3, [r7, #5]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8001dde:	797b      	ldrb	r3, [r7, #5]
 8001de0:	3b20      	subs	r3, #32
 8001de2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	73bb      	strb	r3, [r7, #14]
 8001de8:	e04d      	b.n	8001e86 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8001dea:	793b      	ldrb	r3, [r7, #4]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d10b      	bne.n	8001e08 <OLED_ShowChar+0x4c>
 8001df0:	797a      	ldrb	r2, [r7, #5]
 8001df2:	7bb9      	ldrb	r1, [r7, #14]
 8001df4:	4828      	ldr	r0, [pc, #160]	; (8001e98 <OLED_ShowChar+0xdc>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4403      	add	r3, r0
 8001e00:	440b      	add	r3, r1
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e007      	b.n	8001e18 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001e08:	797a      	ldrb	r2, [r7, #5]
 8001e0a:	7bbb      	ldrb	r3, [r7, #14]
 8001e0c:	4923      	ldr	r1, [pc, #140]	; (8001e9c <OLED_ShowChar+0xe0>)
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	440a      	add	r2, r1
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	737b      	strb	r3, [r7, #13]
 8001e1c:	e02d      	b.n	8001e7a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da07      	bge.n	8001e36 <OLED_ShowChar+0x7a>
 8001e26:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e2a:	79b9      	ldrb	r1, [r7, #6]
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff6a 	bl	8001d08 <OLED_DrawPoint>
 8001e34:	e00c      	b.n	8001e50 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001e36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	79b9      	ldrb	r1, [r7, #6]
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff5c 	bl	8001d08 <OLED_DrawPoint>
			temp<<=1;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
			y++;
 8001e56:	79bb      	ldrb	r3, [r7, #6]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001e5c:	79ba      	ldrb	r2, [r7, #6]
 8001e5e:	7b3b      	ldrb	r3, [r7, #12]
 8001e60:	1ad2      	subs	r2, r2, r3
 8001e62:	793b      	ldrb	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d105      	bne.n	8001e74 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001e68:	7b3b      	ldrb	r3, [r7, #12]
 8001e6a:	71bb      	strb	r3, [r7, #6]
				x++;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	71fb      	strb	r3, [r7, #7]
				break;
 8001e72:	e005      	b.n	8001e80 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001e74:	7b7b      	ldrb	r3, [r7, #13]
 8001e76:	3301      	adds	r3, #1
 8001e78:	737b      	strb	r3, [r7, #13]
 8001e7a:	7b7b      	ldrb	r3, [r7, #13]
 8001e7c:	2b07      	cmp	r3, #7
 8001e7e:	d9ce      	bls.n	8001e1e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001e80:	7bbb      	ldrb	r3, [r7, #14]
 8001e82:	3301      	adds	r3, #1
 8001e84:	73bb      	strb	r3, [r7, #14]
 8001e86:	7bba      	ldrb	r2, [r7, #14]
 8001e88:	793b      	ldrb	r3, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d3ad      	bcc.n	8001dea <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd90      	pop	{r4, r7, pc}
 8001e98:	080070ac 	.word	0x080070ac
 8001e9c:	08007520 	.word	0x08007520

08001ea0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	603a      	str	r2, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
 8001eac:	460b      	mov	r3, r1
 8001eae:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8001eb0:	e01f      	b.n	8001ef2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2b7a      	cmp	r3, #122	; 0x7a
 8001eb6:	d904      	bls.n	8001ec2 <OLED_ShowString+0x22>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	79bb      	ldrb	r3, [r7, #6]
 8001ebe:	3310      	adds	r3, #16
 8001ec0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	2b3a      	cmp	r3, #58	; 0x3a
 8001ec6:	d905      	bls.n	8001ed4 <OLED_ShowString+0x34>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	71fb      	strb	r3, [r7, #7]
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	71bb      	strb	r3, [r7, #6]
 8001ed0:	f7ff fef4 	bl	8001cbc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	79b9      	ldrb	r1, [r7, #6]
 8001eda:	79f8      	ldrb	r0, [r7, #7]
 8001edc:	2301      	movs	r3, #1
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	f7ff ff6b 	bl	8001dbc <OLED_ShowChar>
        x+=8;
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	3308      	adds	r3, #8
 8001eea:	71fb      	strb	r3, [r7, #7]
        p++;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1db      	bne.n	8001eb2 <OLED_ShowString+0x12>
    }  
}	 
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_I2C_MspInit+0x84>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d12c      	bne.n	8001fd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_I2C_MspInit+0x88>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <HAL_I2C_MspInit+0x88>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_I2C_MspInit+0x88>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f98:	2312      	movs	r3, #18
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <HAL_I2C_MspInit+0x8c>)
 8001fb0:	f000 fef0 	bl	8002d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_I2C_MspInit+0x88>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_I2C_MspInit+0x88>)
 8001fbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_I2C_MspInit+0x88>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40005400 	.word	0x40005400
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020400 	.word	0x40020400

08001fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a15      	ldr	r2, [pc, #84]	; (8002048 <HAL_TIM_Base_MspInit+0x64>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_TIM_Base_MspInit+0x68>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a13      	ldr	r2, [pc, #76]	; (800204c <HAL_TIM_Base_MspInit+0x68>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_TIM_Base_MspInit+0x68>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002012:	e012      	b.n	800203a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <HAL_TIM_Base_MspInit+0x6c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10d      	bne.n	800203a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_TIM_Base_MspInit+0x68>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <HAL_TIM_Base_MspInit+0x68>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b07      	ldr	r3, [pc, #28]	; (800204c <HAL_TIM_Base_MspInit+0x68>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40023800 	.word	0x40023800
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d12b      	bne.n	80020ce <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_TIM_Encoder_MspInit+0x88>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_TIM_Encoder_MspInit+0x88>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_TIM_Encoder_MspInit+0x88>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_TIM_Encoder_MspInit+0x88>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a10      	ldr	r2, [pc, #64]	; (80020dc <HAL_TIM_Encoder_MspInit+0x88>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_TIM_Encoder_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ae:	23c0      	movs	r3, #192	; 0xc0
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020be:	2302      	movs	r3, #2
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80020ca:	f000 fe63 	bl	8002d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a35      	ldr	r2, [pc, #212]	; (80021d8 <HAL_UART_MspInit+0xf4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d163      	bne.n	80021ce <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_UART_MspInit+0xf8>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a33      	ldr	r2, [pc, #204]	; (80021dc <HAL_UART_MspInit+0xf8>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_UART_MspInit+0xf8>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_UART_MspInit+0xf8>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a2c      	ldr	r2, [pc, #176]	; (80021dc <HAL_UART_MspInit+0xf8>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <HAL_UART_MspInit+0xf8>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800213e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002150:	2307      	movs	r3, #7
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4619      	mov	r1, r3
 800215a:	4821      	ldr	r0, [pc, #132]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 800215c:	f000 fe1a 	bl	8002d94 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002160:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_UART_MspInit+0x100>)
 8002162:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <HAL_UART_MspInit+0x104>)
 8002164:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002166:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <HAL_UART_MspInit+0x100>)
 8002168:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800216c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_UART_MspInit+0x100>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_UART_MspInit+0x100>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_UART_MspInit+0x100>)
 800217c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002180:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_UART_MspInit+0x100>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_UART_MspInit+0x100>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_UART_MspInit+0x100>)
 8002190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002194:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_UART_MspInit+0x100>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_UART_MspInit+0x100>)
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80021a2:	4810      	ldr	r0, [pc, #64]	; (80021e4 <HAL_UART_MspInit+0x100>)
 80021a4:	f000 fa7a 	bl	800269c <HAL_DMA_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80021ae:	f7ff fcfd 	bl	8001bac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <HAL_UART_MspInit+0x100>)
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_UART_MspInit+0x100>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2027      	movs	r0, #39	; 0x27
 80021c4:	f000 fa33 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021c8:	2027      	movs	r0, #39	; 0x27
 80021ca:	f000 fa4c 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40004800 	.word	0x40004800
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020800 	.word	0x40020800
 80021e4:	20000228 	.word	0x20000228
 80021e8:	40026028 	.word	0x40026028

080021ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <NMI_Handler+0x4>

080021f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <MemManage_Handler+0x4>

080021fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <BusFault_Handler+0x4>

08002204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <UsageFault_Handler+0x4>

0800220a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002238:	f000 f8da 	bl	80023f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}

08002240 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <DMA1_Stream1_IRQHandler+0x10>)
 8002246:	f000 fb69 	bl	800291c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000228 	.word	0x20000228

08002254 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <USART3_IRQHandler+0x10>)
 800225a:	f003 fad9 	bl	8005810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200001e4 	.word	0x200001e4

08002268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002270:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <_sbrk+0x5c>)
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <_sbrk+0x60>)
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <_sbrk+0x64>)
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <_sbrk+0x68>)
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d207      	bcs.n	80022a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002298:	f004 f9ee 	bl	8006678 <__errno>
 800229c:	4603      	mov	r3, r0
 800229e:	220c      	movs	r2, #12
 80022a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	e009      	b.n	80022bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <_sbrk+0x64>)
 80022b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20020000 	.word	0x20020000
 80022c8:	00000400 	.word	0x00000400
 80022cc:	20000688 	.word	0x20000688
 80022d0:	200006a0 	.word	0x200006a0

080022d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <SystemInit+0x20>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <SystemInit+0x20>)
 80022e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002330 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022fc:	480d      	ldr	r0, [pc, #52]	; (8002334 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022fe:	490e      	ldr	r1, [pc, #56]	; (8002338 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002304:	e002      	b.n	800230c <LoopCopyDataInit>

08002306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230a:	3304      	adds	r3, #4

0800230c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800230c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002310:	d3f9      	bcc.n	8002306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002314:	4c0b      	ldr	r4, [pc, #44]	; (8002344 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002318:	e001      	b.n	800231e <LoopFillZerobss>

0800231a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800231c:	3204      	adds	r2, #4

0800231e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002320:	d3fb      	bcc.n	800231a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002322:	f7ff ffd7 	bl	80022d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002326:	f004 f9ad 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800232a:	f7ff f8f9 	bl	8001520 <main>
  bx  lr    
 800232e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002338:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800233c:	08007b74 	.word	0x08007b74
  ldr r2, =_sbss
 8002340:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002344:	200006a0 	.word	0x200006a0

08002348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC_IRQHandler>
	...

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <HAL_Init+0x40>)
 8002356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800235a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_Init+0x40>)
 8002362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a07      	ldr	r2, [pc, #28]	; (800238c <HAL_Init+0x40>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002374:	2003      	movs	r0, #3
 8002376:	f000 f94f 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237a:	200f      	movs	r0, #15
 800237c:	f000 f808 	bl	8002390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002380:	f7ff fdc0 	bl	8001f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023c00 	.word	0x40023c00

08002390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_InitTick+0x54>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_InitTick+0x58>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f967 	bl	8002682 <HAL_SYSTICK_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00e      	b.n	80023dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d80a      	bhi.n	80023da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c4:	2200      	movs	r2, #0
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f000 f92f 	bl	800262e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d0:	4a06      	ldr	r2, [pc, #24]	; (80023ec <HAL_InitTick+0x5c>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000000 	.word	0x20000000
 80023e8:	20000008 	.word	0x20000008
 80023ec:	20000004 	.word	0x20000004

080023f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000008 	.word	0x20000008
 8002414:	2000068c 	.word	0x2000068c

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	2000068c 	.word	0x2000068c

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff ffee 	bl	8002418 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d005      	beq.n	8002456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_Delay+0x44>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002456:	bf00      	nop
 8002458:	f7ff ffde 	bl	8002418 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <HAL_Delay+0x28>
  {
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000008 	.word	0x20000008

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <__NVIC_EnableIRQ+0x38>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e4:	d301      	bcc.n	80025ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00f      	b.n	800260a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <SysTick_Config+0x40>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f2:	210f      	movs	r1, #15
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f7ff ff8e 	bl	8002518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <SysTick_Config+0x40>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <SysTick_Config+0x40>)
 8002604:	2207      	movs	r2, #7
 8002606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000e010 	.word	0xe000e010

08002618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff29 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002640:	f7ff ff3e 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 8002644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f7ff ff8e 	bl	800256c <NVIC_EncodePriority>
 8002650:	4602      	mov	r2, r0
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff5d 	bl	8002518 <__NVIC_SetPriority>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff31 	bl	80024dc <__NVIC_EnableIRQ>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffa2 	bl	80025d4 <SysTick_Config>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff feb6 	bl	8002418 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e099      	b.n	80027ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d8:	e00f      	b.n	80026fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026da:	f7ff fe9d 	bl	8002418 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d908      	bls.n	80026fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2203      	movs	r2, #3
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e078      	b.n	80027ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1e8      	bne.n	80026da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <HAL_DMA_Init+0x158>)
 8002714:	4013      	ands	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002726:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2b04      	cmp	r3, #4
 8002752:	d107      	bne.n	8002764 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	4313      	orrs	r3, r2
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0307 	bic.w	r3, r3, #7
 800277a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	2b04      	cmp	r3, #4
 800278c:	d117      	bne.n	80027be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00e      	beq.n	80027be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fa7b 	bl	8002c9c <DMA_CheckFifoParam>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2240      	movs	r2, #64	; 0x40
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027ba:	2301      	movs	r3, #1
 80027bc:	e016      	b.n	80027ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa32 	bl	8002c30 <DMA_CalcBaseAndBitshift>
 80027cc:	4603      	mov	r3, r0
 80027ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	223f      	movs	r2, #63	; 0x3f
 80027d6:	409a      	lsls	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	f010803f 	.word	0xf010803f

080027f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002806:	f7ff fe07 	bl	8002418 <HAL_GetTick>
 800280a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d008      	beq.n	800282a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2280      	movs	r2, #128	; 0x80
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e052      	b.n	80028d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0216 	bic.w	r2, r2, #22
 8002838:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002848:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_DMA_Abort+0x62>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0208 	bic.w	r2, r2, #8
 8002868:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800287a:	e013      	b.n	80028a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800287c:	f7ff fdcc 	bl	8002418 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b05      	cmp	r3, #5
 8002888:	d90c      	bls.n	80028a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2203      	movs	r2, #3
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e015      	b.n	80028d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e4      	bne.n	800287c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	223f      	movs	r2, #63	; 0x3f
 80028b8:	409a      	lsls	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d004      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2280      	movs	r2, #128	; 0x80
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00c      	b.n	8002910 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2205      	movs	r2, #5
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002928:	4b8e      	ldr	r3, [pc, #568]	; (8002b64 <HAL_DMA_IRQHandler+0x248>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a8e      	ldr	r2, [pc, #568]	; (8002b68 <HAL_DMA_IRQHandler+0x24c>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	0a9b      	lsrs	r3, r3, #10
 8002934:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	2208      	movs	r2, #8
 8002948:	409a      	lsls	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01a      	beq.n	8002988 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0204 	bic.w	r2, r2, #4
 800296e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	2208      	movs	r2, #8
 8002976:	409a      	lsls	r2, r3
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	f043 0201 	orr.w	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	2201      	movs	r2, #1
 800298e:	409a      	lsls	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d012      	beq.n	80029be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	2201      	movs	r2, #1
 80029ac:	409a      	lsls	r2, r3
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f043 0202 	orr.w	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	2204      	movs	r2, #4
 80029c4:	409a      	lsls	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d012      	beq.n	80029f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	2204      	movs	r2, #4
 80029e2:	409a      	lsls	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ec:	f043 0204 	orr.w	r2, r3, #4
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	2210      	movs	r2, #16
 80029fa:	409a      	lsls	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d043      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d03c      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	2210      	movs	r2, #16
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d018      	beq.n	8002a5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d108      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d024      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
 8002a4a:	e01f      	b.n	8002a8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01b      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
 8002a5c:	e016      	b.n	8002a8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0208 	bic.w	r2, r2, #8
 8002a7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	2220      	movs	r2, #32
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 808f 	beq.w	8002bbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8087 	beq.w	8002bbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d136      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0216 	bic.w	r2, r2, #22
 8002ad4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d103      	bne.n	8002af6 <HAL_DMA_IRQHandler+0x1da>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0208 	bic.w	r2, r2, #8
 8002b04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	223f      	movs	r2, #63	; 0x3f
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d07e      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
        }
        return;
 8002b32:	e079      	b.n	8002c28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01d      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d031      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
 8002b60:	e02c      	b.n	8002bbc <HAL_DMA_IRQHandler+0x2a0>
 8002b62:	bf00      	nop
 8002b64:	20000000 	.word	0x20000000
 8002b68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d023      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
 8002b7c:	e01e      	b.n	8002bbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10f      	bne.n	8002bac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0210 	bic.w	r2, r2, #16
 8002b9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d032      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d022      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2205      	movs	r2, #5
 8002bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	3301      	adds	r3, #1
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d307      	bcc.n	8002c04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f2      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x2cc>
 8002c02:	e000      	b.n	8002c06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
 8002c26:	e000      	b.n	8002c2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c28:	bf00      	nop
    }
  }
}
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	3b10      	subs	r3, #16
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <DMA_CalcBaseAndBitshift+0x64>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c4a:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <DMA_CalcBaseAndBitshift+0x68>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d909      	bls.n	8002c72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	1d1a      	adds	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c70:	e007      	b.n	8002c82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	aaaaaaab 	.word	0xaaaaaaab
 8002c98:	08007b28 	.word	0x08007b28

08002c9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11f      	bne.n	8002cf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d856      	bhi.n	8002d6a <DMA_CheckFifoParam+0xce>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <DMA_CheckFifoParam+0x28>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002ce7 	.word	0x08002ce7
 8002ccc:	08002cd5 	.word	0x08002cd5
 8002cd0:	08002d6b 	.word	0x08002d6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d046      	beq.n	8002d6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce4:	e043      	b.n	8002d6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cee:	d140      	bne.n	8002d72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e03d      	b.n	8002d72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfe:	d121      	bne.n	8002d44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d837      	bhi.n	8002d76 <DMA_CheckFifoParam+0xda>
 8002d06:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <DMA_CheckFifoParam+0x70>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002d1d 	.word	0x08002d1d
 8002d10:	08002d23 	.word	0x08002d23
 8002d14:	08002d1d 	.word	0x08002d1d
 8002d18:	08002d35 	.word	0x08002d35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d20:	e030      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d025      	beq.n	8002d7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d32:	e022      	b.n	8002d7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d3c:	d11f      	bne.n	8002d7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d42:	e01c      	b.n	8002d7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d903      	bls.n	8002d52 <DMA_CheckFifoParam+0xb6>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d003      	beq.n	8002d58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d50:	e018      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      break;
 8002d56:	e015      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00e      	beq.n	8002d82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      break;
 8002d68:	e00b      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
      break;
 8002d6a:	bf00      	nop
 8002d6c:	e00a      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d6e:	bf00      	nop
 8002d70:	e008      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d72:	bf00      	nop
 8002d74:	e006      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d76:	bf00      	nop
 8002d78:	e004      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e002      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
    }
  } 
  
  return status; 
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop

08002d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	e16b      	b.n	8003088 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002db0:	2201      	movs	r2, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	f040 815a 	bne.w	8003082 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d005      	beq.n	8002de6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d130      	bne.n	8002e48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 0201 	and.w	r2, r3, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d017      	beq.n	8002e84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d123      	bne.n	8002ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	08da      	lsrs	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3208      	adds	r2, #8
 8002e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	08da      	lsrs	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3208      	adds	r2, #8
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0203 	and.w	r2, r3, #3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80b4 	beq.w	8003082 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b60      	ldr	r3, [pc, #384]	; (80030a0 <HAL_GPIO_Init+0x30c>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	4a5f      	ldr	r2, [pc, #380]	; (80030a0 <HAL_GPIO_Init+0x30c>)
 8002f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f28:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2a:	4b5d      	ldr	r3, [pc, #372]	; (80030a0 <HAL_GPIO_Init+0x30c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f36:	4a5b      	ldr	r2, [pc, #364]	; (80030a4 <HAL_GPIO_Init+0x310>)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	220f      	movs	r2, #15
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a52      	ldr	r2, [pc, #328]	; (80030a8 <HAL_GPIO_Init+0x314>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d02b      	beq.n	8002fba <HAL_GPIO_Init+0x226>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a51      	ldr	r2, [pc, #324]	; (80030ac <HAL_GPIO_Init+0x318>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d025      	beq.n	8002fb6 <HAL_GPIO_Init+0x222>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_GPIO_Init+0x31c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01f      	beq.n	8002fb2 <HAL_GPIO_Init+0x21e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4f      	ldr	r2, [pc, #316]	; (80030b4 <HAL_GPIO_Init+0x320>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d019      	beq.n	8002fae <HAL_GPIO_Init+0x21a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a4e      	ldr	r2, [pc, #312]	; (80030b8 <HAL_GPIO_Init+0x324>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_GPIO_Init+0x216>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <HAL_GPIO_Init+0x328>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00d      	beq.n	8002fa6 <HAL_GPIO_Init+0x212>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4c      	ldr	r2, [pc, #304]	; (80030c0 <HAL_GPIO_Init+0x32c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d007      	beq.n	8002fa2 <HAL_GPIO_Init+0x20e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4b      	ldr	r2, [pc, #300]	; (80030c4 <HAL_GPIO_Init+0x330>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <HAL_GPIO_Init+0x20a>
 8002f9a:	2307      	movs	r3, #7
 8002f9c:	e00e      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	e00c      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fa2:	2306      	movs	r3, #6
 8002fa4:	e00a      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fa6:	2305      	movs	r3, #5
 8002fa8:	e008      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002faa:	2304      	movs	r3, #4
 8002fac:	e006      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e004      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e002      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_GPIO_Init+0x228>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	f002 0203 	and.w	r2, r2, #3
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	4093      	lsls	r3, r2
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fcc:	4935      	ldr	r1, [pc, #212]	; (80030a4 <HAL_GPIO_Init+0x310>)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fda:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_GPIO_Init+0x334>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ffe:	4a32      	ldr	r2, [pc, #200]	; (80030c8 <HAL_GPIO_Init+0x334>)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003004:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_GPIO_Init+0x334>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003028:	4a27      	ldr	r2, [pc, #156]	; (80030c8 <HAL_GPIO_Init+0x334>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_GPIO_Init+0x334>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003052:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_GPIO_Init+0x334>)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003058:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_GPIO_Init+0x334>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800307c:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <HAL_GPIO_Init+0x334>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3301      	adds	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	f67f ae90 	bls.w	8002db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3724      	adds	r7, #36	; 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40013800 	.word	0x40013800
 80030a8:	40020000 	.word	0x40020000
 80030ac:	40020400 	.word	0x40020400
 80030b0:	40020800 	.word	0x40020800
 80030b4:	40020c00 	.word	0x40020c00
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40021400 	.word	0x40021400
 80030c0:	40021800 	.word	0x40021800
 80030c4:	40021c00 	.word	0x40021c00
 80030c8:	40013c00 	.word	0x40013c00

080030cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
 80030d8:	4613      	mov	r3, r2
 80030da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030dc:	787b      	ldrb	r3, [r7, #1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030e8:	e003      	b.n	80030f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ea:	887b      	ldrh	r3, [r7, #2]
 80030ec:	041a      	lsls	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	619a      	str	r2, [r3, #24]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e12b      	b.n	800336a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe ff14 	bl	8001f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2224      	movs	r2, #36	; 0x24
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003152:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003162:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003164:	f001 fbbc 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 8003168:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4a81      	ldr	r2, [pc, #516]	; (8003374 <HAL_I2C_Init+0x274>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d807      	bhi.n	8003184 <HAL_I2C_Init+0x84>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a80      	ldr	r2, [pc, #512]	; (8003378 <HAL_I2C_Init+0x278>)
 8003178:	4293      	cmp	r3, r2
 800317a:	bf94      	ite	ls
 800317c:	2301      	movls	r3, #1
 800317e:	2300      	movhi	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e006      	b.n	8003192 <HAL_I2C_Init+0x92>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a7d      	ldr	r2, [pc, #500]	; (800337c <HAL_I2C_Init+0x27c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	bf94      	ite	ls
 800318c:	2301      	movls	r3, #1
 800318e:	2300      	movhi	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0e7      	b.n	800336a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a78      	ldr	r2, [pc, #480]	; (8003380 <HAL_I2C_Init+0x280>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	0c9b      	lsrs	r3, r3, #18
 80031a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a6a      	ldr	r2, [pc, #424]	; (8003374 <HAL_I2C_Init+0x274>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d802      	bhi.n	80031d4 <HAL_I2C_Init+0xd4>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	3301      	adds	r3, #1
 80031d2:	e009      	b.n	80031e8 <HAL_I2C_Init+0xe8>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	4a69      	ldr	r2, [pc, #420]	; (8003384 <HAL_I2C_Init+0x284>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	3301      	adds	r3, #1
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	495c      	ldr	r1, [pc, #368]	; (8003374 <HAL_I2C_Init+0x274>)
 8003204:	428b      	cmp	r3, r1
 8003206:	d819      	bhi.n	800323c <HAL_I2C_Init+0x13c>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1e59      	subs	r1, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fbb1 f3f3 	udiv	r3, r1, r3
 8003216:	1c59      	adds	r1, r3, #1
 8003218:	f640 73fc 	movw	r3, #4092	; 0xffc
 800321c:	400b      	ands	r3, r1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_I2C_Init+0x138>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1e59      	subs	r1, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003230:	3301      	adds	r3, #1
 8003232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003236:	e051      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 8003238:	2304      	movs	r3, #4
 800323a:	e04f      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d111      	bne.n	8003268 <HAL_I2C_Init+0x168>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1e58      	subs	r0, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	440b      	add	r3, r1
 8003252:	fbb0 f3f3 	udiv	r3, r0, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e012      	b.n	800328e <HAL_I2C_Init+0x18e>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1e58      	subs	r0, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	0099      	lsls	r1, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	fbb0 f3f3 	udiv	r3, r0, r3
 800327e:	3301      	adds	r3, #1
 8003280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_Init+0x196>
 8003292:	2301      	movs	r3, #1
 8003294:	e022      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10e      	bne.n	80032bc <HAL_I2C_Init+0x1bc>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1e58      	subs	r0, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6859      	ldr	r1, [r3, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	440b      	add	r3, r1
 80032ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b0:	3301      	adds	r3, #1
 80032b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ba:	e00f      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e58      	subs	r0, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	0099      	lsls	r1, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	6809      	ldr	r1, [r1, #0]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800330a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6911      	ldr	r1, [r2, #16]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68d2      	ldr	r2, [r2, #12]
 8003316:	4311      	orrs	r1, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	000186a0 	.word	0x000186a0
 8003378:	001e847f 	.word	0x001e847f
 800337c:	003d08ff 	.word	0x003d08ff
 8003380:	431bde83 	.word	0x431bde83
 8003384:	10624dd3 	.word	0x10624dd3

08003388 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4603      	mov	r3, r0
 8003398:	817b      	strh	r3, [r7, #10]
 800339a:	460b      	mov	r3, r1
 800339c:	813b      	strh	r3, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033a2:	f7ff f839 	bl	8002418 <HAL_GetTick>
 80033a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	f040 80d9 	bne.w	8003568 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2319      	movs	r3, #25
 80033bc:	2201      	movs	r2, #1
 80033be:	496d      	ldr	r1, [pc, #436]	; (8003574 <HAL_I2C_Mem_Write+0x1ec>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fc7f 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
 80033ce:	e0cc      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Mem_Write+0x56>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0c5      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d007      	beq.n	8003404 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2221      	movs	r2, #33	; 0x21
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2240      	movs	r2, #64	; 0x40
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4a4d      	ldr	r2, [pc, #308]	; (8003578 <HAL_I2C_Mem_Write+0x1f0>)
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003446:	88f8      	ldrh	r0, [r7, #6]
 8003448:	893a      	ldrh	r2, [r7, #8]
 800344a:	8979      	ldrh	r1, [r7, #10]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	4603      	mov	r3, r0
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fab6 	bl	80039c8 <I2C_RequestMemoryWrite>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d052      	beq.n	8003508 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e081      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fd00 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b04      	cmp	r3, #4
 800347c:	d107      	bne.n	800348e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e06b      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11b      	bne.n	8003508 <HAL_I2C_Mem_Write+0x180>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d017      	beq.n	8003508 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1aa      	bne.n	8003466 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fcec 	bl	8003ef2 <I2C_WaitOnBTFFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00d      	beq.n	800353c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	2b04      	cmp	r3, #4
 8003526:	d107      	bne.n	8003538 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003536:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e016      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	00100002 	.word	0x00100002
 8003578:	ffff0000 	.word	0xffff0000

0800357c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08c      	sub	sp, #48	; 0x30
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	4608      	mov	r0, r1
 8003586:	4611      	mov	r1, r2
 8003588:	461a      	mov	r2, r3
 800358a:	4603      	mov	r3, r0
 800358c:	817b      	strh	r3, [r7, #10]
 800358e:	460b      	mov	r3, r1
 8003590:	813b      	strh	r3, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003596:	f7fe ff3f 	bl	8002418 <HAL_GetTick>
 800359a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	f040 8208 	bne.w	80039ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2319      	movs	r3, #25
 80035b0:	2201      	movs	r2, #1
 80035b2:	497b      	ldr	r1, [pc, #492]	; (80037a0 <HAL_I2C_Mem_Read+0x224>)
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fb85 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
 80035c2:	e1fb      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_I2C_Mem_Read+0x56>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e1f4      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d007      	beq.n	80035f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2222      	movs	r2, #34	; 0x22
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2240      	movs	r2, #64	; 0x40
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a5b      	ldr	r2, [pc, #364]	; (80037a4 <HAL_I2C_Mem_Read+0x228>)
 8003638:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800363a:	88f8      	ldrh	r0, [r7, #6]
 800363c:	893a      	ldrh	r2, [r7, #8]
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4603      	mov	r3, r0
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fa52 	bl	8003af4 <I2C_RequestMemoryRead>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e1b0      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	d113      	bne.n	800368a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	623b      	str	r3, [r7, #32]
 8003676:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e184      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	2b01      	cmp	r3, #1
 8003690:	d11b      	bne.n	80036ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	e164      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d11b      	bne.n	800370a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	e144      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003720:	e138      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	2b03      	cmp	r3, #3
 8003728:	f200 80f1 	bhi.w	800390e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	2b01      	cmp	r3, #1
 8003732:	d123      	bne.n	800377c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fc1b 	bl	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e139      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a
 800377a:	e10b      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	2b02      	cmp	r3, #2
 8003782:	d14e      	bne.n	8003822 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	2200      	movs	r2, #0
 800378c:	4906      	ldr	r1, [pc, #24]	; (80037a8 <HAL_I2C_Mem_Read+0x22c>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fa98 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e10e      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
 800379e:	bf00      	nop
 80037a0:	00100002 	.word	0x00100002
 80037a4:	ffff0000 	.word	0xffff0000
 80037a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003820:	e0b8      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	2200      	movs	r2, #0
 800382a:	4966      	ldr	r1, [pc, #408]	; (80039c4 <HAL_I2C_Mem_Read+0x448>)
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 fa49 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0bf      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	2200      	movs	r2, #0
 8003886:	494f      	ldr	r1, [pc, #316]	; (80039c4 <HAL_I2C_Mem_Read+0x448>)
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fa1b 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e091      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800390c:	e042      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fb2e 	bl	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e04c      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d118      	bne.n	8003994 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	f47f aec2 	bne.w	8003722 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e000      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039ba:	2302      	movs	r3, #2
  }
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3728      	adds	r7, #40	; 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	00010004 	.word	0x00010004

080039c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	4608      	mov	r0, r1
 80039d2:	4611      	mov	r1, r2
 80039d4:	461a      	mov	r2, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	817b      	strh	r3, [r7, #10]
 80039da:	460b      	mov	r3, r1
 80039dc:	813b      	strh	r3, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f960 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a18:	d103      	bne.n	8003a22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e05f      	b.n	8003ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a26:	897b      	ldrh	r3, [r7, #10]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	6a3a      	ldr	r2, [r7, #32]
 8003a3a:	492d      	ldr	r1, [pc, #180]	; (8003af0 <I2C_RequestMemoryWrite+0x128>)
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f998 	bl	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e04c      	b.n	8003ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	6a39      	ldr	r1, [r7, #32]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fa02 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d107      	bne.n	8003a8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e02b      	b.n	8003ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a94:	893b      	ldrh	r3, [r7, #8]
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	611a      	str	r2, [r3, #16]
 8003a9e:	e021      	b.n	8003ae4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003aa0:	893b      	ldrh	r3, [r7, #8]
 8003aa2:	0a1b      	lsrs	r3, r3, #8
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab0:	6a39      	ldr	r1, [r7, #32]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f9dc 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d107      	bne.n	8003ad6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e005      	b.n	8003ae6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ada:	893b      	ldrh	r3, [r7, #8]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	00010002 	.word	0x00010002

08003af4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	4608      	mov	r0, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	461a      	mov	r2, r3
 8003b02:	4603      	mov	r3, r0
 8003b04:	817b      	strh	r3, [r7, #10]
 8003b06:	460b      	mov	r3, r1
 8003b08:	813b      	strh	r3, [r7, #8]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f8c2 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b54:	d103      	bne.n	8003b5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e0aa      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	6a3a      	ldr	r2, [r7, #32]
 8003b76:	4952      	ldr	r1, [pc, #328]	; (8003cc0 <I2C_RequestMemoryRead+0x1cc>)
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f8fa 	bl	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e097      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba0:	6a39      	ldr	r1, [r7, #32]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f964 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d107      	bne.n	8003bc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e076      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd0:	893b      	ldrh	r3, [r7, #8]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	611a      	str	r2, [r3, #16]
 8003bda:	e021      	b.n	8003c20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	6a39      	ldr	r1, [r7, #32]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f93e 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00d      	beq.n	8003c16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d107      	bne.n	8003c12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e050      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c16:	893b      	ldrh	r3, [r7, #8]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	6a39      	ldr	r1, [r7, #32]
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f923 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d107      	bne.n	8003c48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e035      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f82b 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c82:	d103      	bne.n	8003c8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e013      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c90:	897b      	ldrh	r3, [r7, #10]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	6a3a      	ldr	r2, [r7, #32]
 8003ca4:	4906      	ldr	r1, [pc, #24]	; (8003cc0 <I2C_RequestMemoryRead+0x1cc>)
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f863 	bl	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	00010002 	.word	0x00010002

08003cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cd4:	e025      	b.n	8003d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d021      	beq.n	8003d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cde:	f7fe fb9b 	bl	8002418 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d116      	bne.n	8003d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f043 0220 	orr.w	r2, r3, #32
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e023      	b.n	8003d6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10d      	bne.n	8003d48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	43da      	mvns	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	e00c      	b.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf0c      	ite	eq
 8003d5a:	2301      	moveq	r3, #1
 8003d5c:	2300      	movne	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d0b6      	beq.n	8003cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d80:	e051      	b.n	8003e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d90:	d123      	bne.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003daa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e046      	b.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d021      	beq.n	8003e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fe fb19 	bl	8002418 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d116      	bne.n	8003e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e020      	b.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d10c      	bne.n	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	43da      	mvns	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf14      	ite	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	2300      	moveq	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	e00b      	b.n	8003e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	43da      	mvns	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d18d      	bne.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e7c:	e02d      	b.n	8003eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8ce 	bl	8004020 <I2C_IsAcknowledgeFailed>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e02d      	b.n	8003eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d021      	beq.n	8003eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e96:	f7fe fabf 	bl	8002418 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d302      	bcc.n	8003eac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d116      	bne.n	8003eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e007      	b.n	8003eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d1ca      	bne.n	8003e7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003efe:	e02d      	b.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f88d 	bl	8004020 <I2C_IsAcknowledgeFailed>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e02d      	b.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d021      	beq.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f18:	f7fe fa7e 	bl	8002418 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d116      	bne.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	f043 0220 	orr.w	r2, r3, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e007      	b.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d1ca      	bne.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f80:	e042      	b.n	8004008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d119      	bne.n	8003fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0210 	mvn.w	r2, #16
 8003f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e029      	b.n	8004018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fe fa28 	bl	8002418 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d116      	bne.n	8004008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e007      	b.n	8004018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d1b5      	bne.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004036:	d11b      	bne.n	8004070 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004040:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f043 0204 	orr.w	r2, r3, #4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e267      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d075      	beq.n	800418a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409e:	4b88      	ldr	r3, [pc, #544]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d00c      	beq.n	80040c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040aa:	4b85      	ldr	r3, [pc, #532]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d112      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b6:	4b82      	ldr	r3, [pc, #520]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c2:	d10b      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4b7e      	ldr	r3, [pc, #504]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d05b      	beq.n	8004188 <HAL_RCC_OscConfig+0x108>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d157      	bne.n	8004188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e242      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x74>
 80040e6:	4b76      	ldr	r3, [pc, #472]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a75      	ldr	r2, [pc, #468]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e01d      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x98>
 80040fe:	4b70      	ldr	r3, [pc, #448]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6f      	ldr	r2, [pc, #444]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b6d      	ldr	r3, [pc, #436]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6c      	ldr	r2, [pc, #432]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 8004118:	4b69      	ldr	r3, [pc, #420]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a68      	ldr	r2, [pc, #416]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b66      	ldr	r3, [pc, #408]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a65      	ldr	r2, [pc, #404]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe f96e 	bl	8002418 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004140:	f7fe f96a 	bl	8002418 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e207      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b5b      	ldr	r3, [pc, #364]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0xc0>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fe f95a 	bl	8002418 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004168:	f7fe f956 	bl	8002418 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1f3      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	4b51      	ldr	r3, [pc, #324]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0xe8>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d063      	beq.n	800425e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a2:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d11c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ae:	4b44      	ldr	r3, [pc, #272]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d116      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ba:	4b41      	ldr	r3, [pc, #260]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e1c7      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d2:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4937      	ldr	r1, [pc, #220]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	e03a      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f0:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <HAL_RCC_OscConfig+0x244>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fe f90f 	bl	8002418 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fe f90b 	bl	8002418 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1a8      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4925      	ldr	r1, [pc, #148]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	e015      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004232:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCC_OscConfig+0x244>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fe f8ee 	bl	8002418 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004240:	f7fe f8ea 	bl	8002418 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e187      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d036      	beq.n	80042d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <HAL_RCC_OscConfig+0x248>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fe f8ce 	bl	8002418 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004280:	f7fe f8ca 	bl	8002418 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e167      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x200>
 800429e:	e01b      	b.n	80042d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_RCC_OscConfig+0x248>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a6:	f7fe f8b7 	bl	8002418 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	e00e      	b.n	80042cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fe f8b3 	bl	8002418 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d907      	bls.n	80042cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e150      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	42470000 	.word	0x42470000
 80042c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	4b88      	ldr	r3, [pc, #544]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ea      	bne.n	80042ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8097 	beq.w	8004414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ea:	4b81      	ldr	r3, [pc, #516]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10f      	bne.n	8004316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	4b7d      	ldr	r3, [pc, #500]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a7c      	ldr	r2, [pc, #496]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
 8004306:	4b7a      	ldr	r3, [pc, #488]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004316:	4b77      	ldr	r3, [pc, #476]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004322:	4b74      	ldr	r3, [pc, #464]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a73      	ldr	r2, [pc, #460]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432e:	f7fe f873 	bl	8002418 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004336:	f7fe f86f 	bl	8002418 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e10c      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	4b6a      	ldr	r3, [pc, #424]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x2ea>
 800435c:	4b64      	ldr	r3, [pc, #400]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4a63      	ldr	r2, [pc, #396]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6713      	str	r3, [r2, #112]	; 0x70
 8004368:	e01c      	b.n	80043a4 <HAL_RCC_OscConfig+0x324>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b05      	cmp	r3, #5
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x30c>
 8004372:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	4a5e      	ldr	r2, [pc, #376]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004378:	f043 0304 	orr.w	r3, r3, #4
 800437c:	6713      	str	r3, [r2, #112]	; 0x70
 800437e:	4b5c      	ldr	r3, [pc, #368]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4a5b      	ldr	r2, [pc, #364]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6713      	str	r3, [r2, #112]	; 0x70
 800438a:	e00b      	b.n	80043a4 <HAL_RCC_OscConfig+0x324>
 800438c:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	4a57      	ldr	r2, [pc, #348]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	6713      	str	r3, [r2, #112]	; 0x70
 8004398:	4b55      	ldr	r3, [pc, #340]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	4a54      	ldr	r2, [pc, #336]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800439e:	f023 0304 	bic.w	r3, r3, #4
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fe f834 	bl	8002418 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b4:	f7fe f830 	bl	8002418 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e0cb      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ca:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ee      	beq.n	80043b4 <HAL_RCC_OscConfig+0x334>
 80043d6:	e014      	b.n	8004402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d8:	f7fe f81e 	bl	8002418 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fe f81a 	bl	8002418 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e0b5      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f6:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1ee      	bne.n	80043e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	4a38      	ldr	r2, [pc, #224]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800440e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004412:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80a1 	beq.w	8004560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800441e:	4b34      	ldr	r3, [pc, #208]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b08      	cmp	r3, #8
 8004428:	d05c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d141      	bne.n	80044b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fd ffee 	bl	8002418 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004440:	f7fd ffea 	bl	8002418 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e087      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	3b01      	subs	r3, #1
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	491b      	ldr	r1, [pc, #108]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448e:	f7fd ffc3 	bl	8002418 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004496:	f7fd ffbf 	bl	8002418 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e05c      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a8:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x416>
 80044b4:	e054      	b.n	8004560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fd ffac 	bl	8002418 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c4:	f7fd ffa8 	bl	8002418 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e045      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x444>
 80044e2:	e03d      	b.n	8004560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e038      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40007000 	.word	0x40007000
 80044f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_RCC_OscConfig+0x4ec>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d028      	beq.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d121      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d11a      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004534:	4293      	cmp	r3, r2
 8004536:	d111      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	3b01      	subs	r3, #1
 8004546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d107      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800

08004570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0cc      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b68      	ldr	r3, [pc, #416]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d90c      	bls.n	80045ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b65      	ldr	r3, [pc, #404]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b63      	ldr	r3, [pc, #396]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0b8      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c4:	4b59      	ldr	r3, [pc, #356]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a58      	ldr	r2, [pc, #352]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045dc:	4b53      	ldr	r3, [pc, #332]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a52      	ldr	r2, [pc, #328]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	494d      	ldr	r1, [pc, #308]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d044      	beq.n	8004690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b47      	ldr	r3, [pc, #284]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d119      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e07f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d003      	beq.n	800462e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462a:	2b03      	cmp	r3, #3
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e067      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b37      	ldr	r3, [pc, #220]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4934      	ldr	r1, [pc, #208]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004660:	f7fd feda 	bl	8002418 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fd fed6 	bl	8002418 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e04f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 020c 	and.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d1eb      	bne.n	8004668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d20c      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b22      	ldr	r3, [pc, #136]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e032      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4916      	ldr	r1, [pc, #88]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490e      	ldr	r1, [pc, #56]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046f6:	f000 f821 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490a      	ldr	r1, [pc, #40]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd fe3a 	bl	8002390 <HAL_InitTick>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40023c00 	.word	0x40023c00
 800472c:	40023800 	.word	0x40023800
 8004730:	08007b10 	.word	0x08007b10
 8004734:	20000000 	.word	0x20000000
 8004738:	20000004 	.word	0x20000004

0800473c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800473c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004740:	b090      	sub	sp, #64	; 0x40
 8004742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
 8004748:	2300      	movs	r3, #0
 800474a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800474c:	2300      	movs	r3, #0
 800474e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004754:	4b59      	ldr	r3, [pc, #356]	; (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d00d      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x40>
 8004760:	2b08      	cmp	r3, #8
 8004762:	f200 80a1 	bhi.w	80048a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x34>
 800476a:	2b04      	cmp	r3, #4
 800476c:	d003      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x3a>
 800476e:	e09b      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004770:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004772:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004774:	e09b      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004776:	4b53      	ldr	r3, [pc, #332]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800477a:	e098      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800477c:	4b4f      	ldr	r3, [pc, #316]	; (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004786:	4b4d      	ldr	r3, [pc, #308]	; (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d028      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004792:	4b4a      	ldr	r3, [pc, #296]	; (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	2200      	movs	r2, #0
 800479a:	623b      	str	r3, [r7, #32]
 800479c:	627a      	str	r2, [r7, #36]	; 0x24
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047a4:	2100      	movs	r1, #0
 80047a6:	4b47      	ldr	r3, [pc, #284]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047a8:	fb03 f201 	mul.w	r2, r3, r1
 80047ac:	2300      	movs	r3, #0
 80047ae:	fb00 f303 	mul.w	r3, r0, r3
 80047b2:	4413      	add	r3, r2
 80047b4:	4a43      	ldr	r2, [pc, #268]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80047b6:	fba0 1202 	umull	r1, r2, r0, r2
 80047ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047bc:	460a      	mov	r2, r1
 80047be:	62ba      	str	r2, [r7, #40]	; 0x28
 80047c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c2:	4413      	add	r3, r2
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	2200      	movs	r2, #0
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	61fa      	str	r2, [r7, #28]
 80047ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047d6:	f7fc f971 	bl	8000abc <__aeabi_uldivmod>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4613      	mov	r3, r2
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e2:	e053      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e4:	4b35      	ldr	r3, [pc, #212]	; (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	099b      	lsrs	r3, r3, #6
 80047ea:	2200      	movs	r2, #0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	617a      	str	r2, [r7, #20]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047f6:	f04f 0b00 	mov.w	fp, #0
 80047fa:	4652      	mov	r2, sl
 80047fc:	465b      	mov	r3, fp
 80047fe:	f04f 0000 	mov.w	r0, #0
 8004802:	f04f 0100 	mov.w	r1, #0
 8004806:	0159      	lsls	r1, r3, #5
 8004808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800480c:	0150      	lsls	r0, r2, #5
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	ebb2 080a 	subs.w	r8, r2, sl
 8004816:	eb63 090b 	sbc.w	r9, r3, fp
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004826:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800482a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800482e:	ebb2 0408 	subs.w	r4, r2, r8
 8004832:	eb63 0509 	sbc.w	r5, r3, r9
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	00eb      	lsls	r3, r5, #3
 8004840:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004844:	00e2      	lsls	r2, r4, #3
 8004846:	4614      	mov	r4, r2
 8004848:	461d      	mov	r5, r3
 800484a:	eb14 030a 	adds.w	r3, r4, sl
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	eb45 030b 	adc.w	r3, r5, fp
 8004854:	607b      	str	r3, [r7, #4]
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004862:	4629      	mov	r1, r5
 8004864:	028b      	lsls	r3, r1, #10
 8004866:	4621      	mov	r1, r4
 8004868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800486c:	4621      	mov	r1, r4
 800486e:	028a      	lsls	r2, r1, #10
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004876:	2200      	movs	r2, #0
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	60fa      	str	r2, [r7, #12]
 800487c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004880:	f7fc f91c 	bl	8000abc <__aeabi_uldivmod>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4613      	mov	r3, r2
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCC_GetSysClockFreq+0x180>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	3301      	adds	r3, #1
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800489c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048a6:	e002      	b.n	80048ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3740      	adds	r7, #64	; 0x40
 80048b4:	46bd      	mov	sp, r7
 80048b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800
 80048c0:	00f42400 	.word	0x00f42400
 80048c4:	017d7840 	.word	0x017d7840

080048c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ce:	681b      	ldr	r3, [r3, #0]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000000 	.word	0x20000000

080048e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048e4:	f7ff fff0 	bl	80048c8 <HAL_RCC_GetHCLKFreq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	0a9b      	lsrs	r3, r3, #10
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	4903      	ldr	r1, [pc, #12]	; (8004904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f6:	5ccb      	ldrb	r3, [r1, r3]
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40023800 	.word	0x40023800
 8004904:	08007b20 	.word	0x08007b20

08004908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800490c:	f7ff ffdc 	bl	80048c8 <HAL_RCC_GetHCLKFreq>
 8004910:	4602      	mov	r2, r0
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	0b5b      	lsrs	r3, r3, #13
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	4903      	ldr	r1, [pc, #12]	; (800492c <HAL_RCC_GetPCLK2Freq+0x24>)
 800491e:	5ccb      	ldrb	r3, [r1, r3]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	08007b20 	.word	0x08007b20

08004930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e041      	b.n	80049c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fd fb44 	bl	8001fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f000 fab6 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e041      	b.n	8004a64 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f839 	bl	8004a6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2202      	movs	r2, #2
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f000 fa67 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e097      	b.n	8004bc4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fd fad3 	bl	8002054 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac4:	f023 0307 	bic.w	r3, r3, #7
 8004ac8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f000 fa03 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	4313      	orrs	r3, r2
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b20:	f023 030c 	bic.w	r3, r3, #12
 8004b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	011a      	lsls	r2, r3, #4
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	031b      	lsls	r3, r3, #12
 8004b50:	4313      	orrs	r3, r2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004b66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	4313      	orrs	r3, r2
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e0ae      	b.n	8004d48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b0c      	cmp	r3, #12
 8004bf6:	f200 809f 	bhi.w	8004d38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bfa:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c35 	.word	0x08004c35
 8004c04:	08004d39 	.word	0x08004d39
 8004c08:	08004d39 	.word	0x08004d39
 8004c0c:	08004d39 	.word	0x08004d39
 8004c10:	08004c75 	.word	0x08004c75
 8004c14:	08004d39 	.word	0x08004d39
 8004c18:	08004d39 	.word	0x08004d39
 8004c1c:	08004d39 	.word	0x08004d39
 8004c20:	08004cb7 	.word	0x08004cb7
 8004c24:	08004d39 	.word	0x08004d39
 8004c28:	08004d39 	.word	0x08004d39
 8004c2c:	08004d39 	.word	0x08004d39
 8004c30:	08004cf7 	.word	0x08004cf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f9f0 	bl	8005020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0208 	orr.w	r2, r2, #8
 8004c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0204 	bic.w	r2, r2, #4
 8004c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6999      	ldr	r1, [r3, #24]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	619a      	str	r2, [r3, #24]
      break;
 8004c72:	e064      	b.n	8004d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fa40 	bl	8005100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6999      	ldr	r1, [r3, #24]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	021a      	lsls	r2, r3, #8
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	619a      	str	r2, [r3, #24]
      break;
 8004cb4:	e043      	b.n	8004d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fa95 	bl	80051ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0208 	orr.w	r2, r2, #8
 8004cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0204 	bic.w	r2, r2, #4
 8004ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69d9      	ldr	r1, [r3, #28]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	61da      	str	r2, [r3, #28]
      break;
 8004cf4:	e023      	b.n	8004d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fae9 	bl	80052d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69d9      	ldr	r1, [r3, #28]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	021a      	lsls	r2, r3, #8
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	61da      	str	r2, [r3, #28]
      break;
 8004d36:	e002      	b.n	8004d3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_TIM_ConfigClockSource+0x1c>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e0b4      	b.n	8004ed6 <HAL_TIM_ConfigClockSource+0x186>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da4:	d03e      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0xd4>
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004daa:	f200 8087 	bhi.w	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db2:	f000 8086 	beq.w	8004ec2 <HAL_TIM_ConfigClockSource+0x172>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dba:	d87f      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dbc:	2b70      	cmp	r3, #112	; 0x70
 8004dbe:	d01a      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0xa6>
 8004dc0:	2b70      	cmp	r3, #112	; 0x70
 8004dc2:	d87b      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dc4:	2b60      	cmp	r3, #96	; 0x60
 8004dc6:	d050      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x11a>
 8004dc8:	2b60      	cmp	r3, #96	; 0x60
 8004dca:	d877      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dcc:	2b50      	cmp	r3, #80	; 0x50
 8004dce:	d03c      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0xfa>
 8004dd0:	2b50      	cmp	r3, #80	; 0x50
 8004dd2:	d873      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d058      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x13a>
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d86f      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004ddc:	2b30      	cmp	r3, #48	; 0x30
 8004dde:	d064      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15a>
 8004de0:	2b30      	cmp	r3, #48	; 0x30
 8004de2:	d86b      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d060      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15a>
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d867      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d05c      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15a>
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	d05a      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15a>
 8004df4:	e062      	b.n	8004ebc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6899      	ldr	r1, [r3, #8]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f000 fb35 	bl	8005474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	609a      	str	r2, [r3, #8]
      break;
 8004e22:	e04f      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	6899      	ldr	r1, [r3, #8]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f000 fb1e 	bl	8005474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e46:	609a      	str	r2, [r3, #8]
      break;
 8004e48:	e03c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f000 fa92 	bl	8005380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2150      	movs	r1, #80	; 0x50
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 faeb 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004e68:	e02c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f000 fab1 	bl	80053de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2160      	movs	r1, #96	; 0x60
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fadb 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004e88:	e01c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f000 fa72 	bl	8005380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2140      	movs	r1, #64	; 0x40
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 facb 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004ea8:	e00c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f000 fac2 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004eba:	e003      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	e000      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a40      	ldr	r2, [pc, #256]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d00f      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a3d      	ldr	r2, [pc, #244]	; (8004ff8 <TIM_Base_SetConfig+0x118>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3c      	ldr	r2, [pc, #240]	; (8004ffc <TIM_Base_SetConfig+0x11c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d007      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3b      	ldr	r2, [pc, #236]	; (8005000 <TIM_Base_SetConfig+0x120>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3a      	ldr	r2, [pc, #232]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d108      	bne.n	8004f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2f      	ldr	r2, [pc, #188]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d02b      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d027      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <TIM_Base_SetConfig+0x118>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d023      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2b      	ldr	r2, [pc, #172]	; (8004ffc <TIM_Base_SetConfig+0x11c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01f      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <TIM_Base_SetConfig+0x120>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01b      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a29      	ldr	r2, [pc, #164]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d017      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a28      	ldr	r2, [pc, #160]	; (8005008 <TIM_Base_SetConfig+0x128>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a27      	ldr	r2, [pc, #156]	; (800500c <TIM_Base_SetConfig+0x12c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00f      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a26      	ldr	r2, [pc, #152]	; (8005010 <TIM_Base_SetConfig+0x130>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00b      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a25      	ldr	r2, [pc, #148]	; (8005014 <TIM_Base_SetConfig+0x134>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a24      	ldr	r2, [pc, #144]	; (8005018 <TIM_Base_SetConfig+0x138>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a23      	ldr	r2, [pc, #140]	; (800501c <TIM_Base_SetConfig+0x13c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d108      	bne.n	8004fa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_Base_SetConfig+0xf8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d103      	bne.n	8004fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	615a      	str	r2, [r3, #20]
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	40000c00 	.word	0x40000c00
 8005004:	40010400 	.word	0x40010400
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800
 8005014:	40001800 	.word	0x40001800
 8005018:	40001c00 	.word	0x40001c00
 800501c:	40002000 	.word	0x40002000

08005020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f023 0302 	bic.w	r3, r3, #2
 8005068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a20      	ldr	r2, [pc, #128]	; (80050f8 <TIM_OC1_SetConfig+0xd8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC1_SetConfig+0x64>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <TIM_OC1_SetConfig+0xdc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10c      	bne.n	800509e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0308 	bic.w	r3, r3, #8
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <TIM_OC1_SetConfig+0xd8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_OC1_SetConfig+0x8e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a14      	ldr	r2, [pc, #80]	; (80050fc <TIM_OC1_SetConfig+0xdc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d111      	bne.n	80050d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40010400 	.word	0x40010400

08005100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	f023 0210 	bic.w	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f023 0320 	bic.w	r3, r3, #32
 800514a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <TIM_OC2_SetConfig+0xe4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_OC2_SetConfig+0x68>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a21      	ldr	r2, [pc, #132]	; (80051e8 <TIM_OC2_SetConfig+0xe8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d10d      	bne.n	8005184 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005182:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <TIM_OC2_SetConfig+0xe4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_OC2_SetConfig+0x94>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <TIM_OC2_SetConfig+0xe8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d113      	bne.n	80051bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800519a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40010400 	.word	0x40010400

080051ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0303 	bic.w	r3, r3, #3
 8005222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a21      	ldr	r2, [pc, #132]	; (80052cc <TIM_OC3_SetConfig+0xe0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_OC3_SetConfig+0x66>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <TIM_OC3_SetConfig+0xe4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10d      	bne.n	800526e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800526c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a16      	ldr	r2, [pc, #88]	; (80052cc <TIM_OC3_SetConfig+0xe0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d003      	beq.n	800527e <TIM_OC3_SetConfig+0x92>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <TIM_OC3_SetConfig+0xe4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d113      	bne.n	80052a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800528c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40010400 	.word	0x40010400

080052d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800531e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	031b      	lsls	r3, r3, #12
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a12      	ldr	r2, [pc, #72]	; (8005378 <TIM_OC4_SetConfig+0xa4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_OC4_SetConfig+0x68>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a11      	ldr	r2, [pc, #68]	; (800537c <TIM_OC4_SetConfig+0xa8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d109      	bne.n	8005350 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	019b      	lsls	r3, r3, #6
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40010400 	.word	0x40010400

08005380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 030a 	bic.w	r3, r3, #10
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053de:	b480      	push	{r7}
 80053e0:	b087      	sub	sp, #28
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0210 	bic.w	r2, r3, #16
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	031b      	lsls	r3, r3, #12
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800541a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	f043 0307 	orr.w	r3, r3, #7
 8005460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	609a      	str	r2, [r3, #8]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800548e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	021a      	lsls	r2, r3, #8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	431a      	orrs	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e05a      	b.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a21      	ldr	r2, [pc, #132]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d022      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005518:	d01d      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d018      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1b      	ldr	r2, [pc, #108]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1a      	ldr	r2, [pc, #104]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00e      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a18      	ldr	r2, [pc, #96]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d009      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a17      	ldr	r2, [pc, #92]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d10c      	bne.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800555c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	4313      	orrs	r3, r2
 8005566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010000 	.word	0x40010000
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40010400 	.word	0x40010400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40001800 	.word	0x40001800

080055ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e03d      	b.n	8005644 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e03f      	b.n	80056e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fc fd34 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2224      	movs	r2, #36	; 0x24
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fd7b 	bl	8006190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b08a      	sub	sp, #40	; 0x28
 80056ee:	af02      	add	r7, sp, #8
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	4613      	mov	r3, r2
 80056f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b20      	cmp	r3, #32
 8005708:	d17c      	bne.n	8005804 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_UART_Transmit+0x2c>
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e075      	b.n	8005806 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_UART_Transmit+0x3e>
 8005724:	2302      	movs	r3, #2
 8005726:	e06e      	b.n	8005806 <HAL_UART_Transmit+0x11c>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2221      	movs	r2, #33	; 0x21
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800573e:	f7fc fe6b 	bl	8002418 <HAL_GetTick>
 8005742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	88fa      	ldrh	r2, [r7, #6]
 8005748:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	88fa      	ldrh	r2, [r7, #6]
 800574e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005758:	d108      	bne.n	800576c <HAL_UART_Transmit+0x82>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d104      	bne.n	800576c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	e003      	b.n	8005774 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005770:	2300      	movs	r3, #0
 8005772:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800577c:	e02a      	b.n	80057d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2200      	movs	r2, #0
 8005786:	2180      	movs	r1, #128	; 0x80
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 faf9 	bl	8005d80 <UART_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e036      	b.n	8005806 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	3302      	adds	r3, #2
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	e007      	b.n	80057c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	3301      	adds	r3, #1
 80057c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1cf      	bne.n	800577e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	2140      	movs	r1, #64	; 0x40
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fac9 	bl	8005d80 <UART_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e006      	b.n	8005806 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e000      	b.n	8005806 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b0ba      	sub	sp, #232	; 0xe8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005836:	2300      	movs	r3, #0
 8005838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800583c:	2300      	movs	r3, #0
 800583e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800584e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10f      	bne.n	8005876 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <HAL_UART_IRQHandler+0x66>
 8005862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fbd3 	bl	800601a <UART_Receive_IT>
      return;
 8005874:	e256      	b.n	8005d24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 80de 	beq.w	8005a3c <HAL_UART_IRQHandler+0x22c>
 8005880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800588c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005890:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80d1 	beq.w	8005a3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_UART_IRQHandler+0xae>
 80058a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f043 0201 	orr.w	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00b      	beq.n	80058e2 <HAL_UART_IRQHandler+0xd2>
 80058ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f043 0202 	orr.w	r2, r3, #2
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <HAL_UART_IRQHandler+0xf6>
 80058ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f043 0204 	orr.w	r2, r3, #4
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d011      	beq.n	8005936 <HAL_UART_IRQHandler+0x126>
 8005912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b00      	cmp	r3, #0
 800591c:	d105      	bne.n	800592a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800591e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f043 0208 	orr.w	r2, r3, #8
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 81ed 	beq.w	8005d1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <HAL_UART_IRQHandler+0x14e>
 800594c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fb5e 	bl	800601a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	bf0c      	ite	eq
 800596c:	2301      	moveq	r3, #1
 800596e:	2300      	movne	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d103      	bne.n	800598a <HAL_UART_IRQHandler+0x17a>
 8005982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d04f      	beq.n	8005a2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa66 	bl	8005e5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d141      	bne.n	8005a22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3314      	adds	r3, #20
 80059a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3314      	adds	r3, #20
 80059c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1d9      	bne.n	800599e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d013      	beq.n	8005a1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	4a7d      	ldr	r2, [pc, #500]	; (8005bec <HAL_UART_IRQHandler+0x3dc>)
 80059f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fc ff6a 	bl	80028d8 <HAL_DMA_Abort_IT>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d016      	beq.n	8005a38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a14:	4610      	mov	r0, r2
 8005a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a18:	e00e      	b.n	8005a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f99a 	bl	8005d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a20:	e00a      	b.n	8005a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f996 	bl	8005d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a28:	e006      	b.n	8005a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f992 	bl	8005d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a36:	e170      	b.n	8005d1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	bf00      	nop
    return;
 8005a3a:	e16e      	b.n	8005d1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	f040 814a 	bne.w	8005cda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4a:	f003 0310 	and.w	r3, r3, #16
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8143 	beq.w	8005cda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 813c 	beq.w	8005cda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	60bb      	str	r3, [r7, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b40      	cmp	r3, #64	; 0x40
 8005a84:	f040 80b4 	bne.w	8005bf0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8140 	beq.w	8005d1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	f080 8139 	bcs.w	8005d1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ab2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005abe:	f000 8088 	beq.w	8005bd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005afa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1d9      	bne.n	8005ac2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3314      	adds	r3, #20
 8005b14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3314      	adds	r3, #20
 8005b2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e1      	bne.n	8005b0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3314      	adds	r3, #20
 8005b50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3314      	adds	r3, #20
 8005b6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e3      	bne.n	8005b4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba2:	f023 0310 	bic.w	r3, r3, #16
 8005ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e3      	bne.n	8005b90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fc fe13 	bl	80027f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8c0 	bl	8005d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005be8:	e099      	b.n	8005d1e <HAL_UART_IRQHandler+0x50e>
 8005bea:	bf00      	nop
 8005bec:	08005f23 	.word	0x08005f23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 808b 	beq.w	8005d22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8086 	beq.w	8005d22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	330c      	adds	r3, #12
 8005c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	330c      	adds	r3, #12
 8005c36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c3a:	647a      	str	r2, [r7, #68]	; 0x44
 8005c3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e3      	bne.n	8005c16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3314      	adds	r3, #20
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	f023 0301 	bic.w	r3, r3, #1
 8005c64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3314      	adds	r3, #20
 8005c6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c72:	633a      	str	r2, [r7, #48]	; 0x30
 8005c74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e3      	bne.n	8005c4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0310 	bic.w	r3, r3, #16
 8005caa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005cb8:	61fa      	str	r2, [r7, #28]
 8005cba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	69b9      	ldr	r1, [r7, #24]
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e3      	bne.n	8005c94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ccc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f848 	bl	8005d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cd8:	e023      	b.n	8005d22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <HAL_UART_IRQHandler+0x4ea>
 8005ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f929 	bl	8005f4a <UART_Transmit_IT>
    return;
 8005cf8:	e014      	b.n	8005d24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00e      	beq.n	8005d24 <HAL_UART_IRQHandler+0x514>
 8005d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f969 	bl	8005fea <UART_EndTransmit_IT>
    return;
 8005d18:	e004      	b.n	8005d24 <HAL_UART_IRQHandler+0x514>
    return;
 8005d1a:	bf00      	nop
 8005d1c:	e002      	b.n	8005d24 <HAL_UART_IRQHandler+0x514>
      return;
 8005d1e:	bf00      	nop
 8005d20:	e000      	b.n	8005d24 <HAL_UART_IRQHandler+0x514>
      return;
 8005d22:	bf00      	nop
  }
}
 8005d24:	37e8      	adds	r7, #232	; 0xe8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop

08005d2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b090      	sub	sp, #64	; 0x40
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d90:	e050      	b.n	8005e34 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d04c      	beq.n	8005e34 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005da0:	f7fc fb3a 	bl	8002418 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d241      	bcs.n	8005e34 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dd0:	637a      	str	r2, [r7, #52]	; 0x34
 8005dd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e5      	bne.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3314      	adds	r3, #20
 8005dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	613b      	str	r3, [r7, #16]
   return(result);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3314      	adds	r3, #20
 8005e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e04:	623a      	str	r2, [r7, #32]
 8005e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	69f9      	ldr	r1, [r7, #28]
 8005e0a:	6a3a      	ldr	r2, [r7, #32]
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e5      	bne.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e00f      	b.n	8005e54 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d09f      	beq.n	8005d92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3740      	adds	r7, #64	; 0x40
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b095      	sub	sp, #84	; 0x54
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	330c      	adds	r3, #12
 8005e82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e84:	643a      	str	r2, [r7, #64]	; 0x40
 8005e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e5      	bne.n	8005e64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e5      	bne.n	8005e98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d119      	bne.n	8005f08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f023 0310 	bic.w	r3, r3, #16
 8005eea:	647b      	str	r3, [r7, #68]	; 0x44
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ef4:	61ba      	str	r2, [r7, #24]
 8005ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6979      	ldr	r1, [r7, #20]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	613b      	str	r3, [r7, #16]
   return(result);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e5      	bne.n	8005ed4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f16:	bf00      	nop
 8005f18:	3754      	adds	r7, #84	; 0x54
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff ff09 	bl	8005d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f42:	bf00      	nop
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b21      	cmp	r3, #33	; 0x21
 8005f5c:	d13e      	bne.n	8005fdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f66:	d114      	bne.n	8005f92 <UART_Transmit_IT+0x48>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d110      	bne.n	8005f92 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	1c9a      	adds	r2, r3, #2
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	621a      	str	r2, [r3, #32]
 8005f90:	e008      	b.n	8005fa4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	1c59      	adds	r1, r3, #1
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6211      	str	r1, [r2, #32]
 8005f9c:	781a      	ldrb	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10f      	bne.n	8005fd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e000      	b.n	8005fde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006000:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fe8e 	bl	8005d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b08c      	sub	sp, #48	; 0x30
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b22      	cmp	r3, #34	; 0x22
 800602c:	f040 80ab 	bne.w	8006186 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006038:	d117      	bne.n	800606a <UART_Receive_IT+0x50>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d113      	bne.n	800606a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006058:	b29a      	uxth	r2, r3
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	1c9a      	adds	r2, r3, #2
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	629a      	str	r2, [r3, #40]	; 0x28
 8006068:	e026      	b.n	80060b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607c:	d007      	beq.n	800608e <UART_Receive_IT+0x74>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <UART_Receive_IT+0x82>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	b2da      	uxtb	r2, r3
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e008      	b.n	80060ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	4619      	mov	r1, r3
 80060c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d15a      	bne.n	8006182 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0220 	bic.w	r2, r2, #32
 80060da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695a      	ldr	r2, [r3, #20]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0201 	bic.w	r2, r2, #1
 80060fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	2b01      	cmp	r3, #1
 800610a:	d135      	bne.n	8006178 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	613b      	str	r3, [r7, #16]
   return(result);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f023 0310 	bic.w	r3, r3, #16
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006132:	623a      	str	r2, [r7, #32]
 8006134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	69f9      	ldr	r1, [r7, #28]
 8006138:	6a3a      	ldr	r2, [r7, #32]
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e5      	bne.n	8006112 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0310 	and.w	r3, r3, #16
 8006150:	2b10      	cmp	r3, #16
 8006152:	d10a      	bne.n	800616a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff fdf9 	bl	8005d68 <HAL_UARTEx_RxEventCallback>
 8006176:	e002      	b.n	800617e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff fde1 	bl	8005d40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	e002      	b.n	8006188 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	e000      	b.n	8006188 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006186:	2302      	movs	r3, #2
  }
}
 8006188:	4618      	mov	r0, r3
 800618a:	3730      	adds	r7, #48	; 0x30
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006194:	b0c0      	sub	sp, #256	; 0x100
 8006196:	af00      	add	r7, sp, #0
 8006198:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ac:	68d9      	ldr	r1, [r3, #12]
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	ea40 0301 	orr.w	r3, r0, r1
 80061b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061e8:	f021 010c 	bic.w	r1, r1, #12
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061f6:	430b      	orrs	r3, r1
 80061f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620a:	6999      	ldr	r1, [r3, #24]
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	ea40 0301 	orr.w	r3, r0, r1
 8006216:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b8f      	ldr	r3, [pc, #572]	; (800645c <UART_SetConfig+0x2cc>)
 8006220:	429a      	cmp	r2, r3
 8006222:	d005      	beq.n	8006230 <UART_SetConfig+0xa0>
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4b8d      	ldr	r3, [pc, #564]	; (8006460 <UART_SetConfig+0x2d0>)
 800622c:	429a      	cmp	r2, r3
 800622e:	d104      	bne.n	800623a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006230:	f7fe fb6a 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 8006234:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006238:	e003      	b.n	8006242 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800623a:	f7fe fb51 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
 800623e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800624c:	f040 810c 	bne.w	8006468 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006254:	2200      	movs	r2, #0
 8006256:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800625a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800625e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006262:	4622      	mov	r2, r4
 8006264:	462b      	mov	r3, r5
 8006266:	1891      	adds	r1, r2, r2
 8006268:	65b9      	str	r1, [r7, #88]	; 0x58
 800626a:	415b      	adcs	r3, r3
 800626c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800626e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006272:	4621      	mov	r1, r4
 8006274:	eb12 0801 	adds.w	r8, r2, r1
 8006278:	4629      	mov	r1, r5
 800627a:	eb43 0901 	adc.w	r9, r3, r1
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800628a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800628e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006292:	4690      	mov	r8, r2
 8006294:	4699      	mov	r9, r3
 8006296:	4623      	mov	r3, r4
 8006298:	eb18 0303 	adds.w	r3, r8, r3
 800629c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062a0:	462b      	mov	r3, r5
 80062a2:	eb49 0303 	adc.w	r3, r9, r3
 80062a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80062ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062be:	460b      	mov	r3, r1
 80062c0:	18db      	adds	r3, r3, r3
 80062c2:	653b      	str	r3, [r7, #80]	; 0x50
 80062c4:	4613      	mov	r3, r2
 80062c6:	eb42 0303 	adc.w	r3, r2, r3
 80062ca:	657b      	str	r3, [r7, #84]	; 0x54
 80062cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062d4:	f7fa fbf2 	bl	8000abc <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4b61      	ldr	r3, [pc, #388]	; (8006464 <UART_SetConfig+0x2d4>)
 80062de:	fba3 2302 	umull	r2, r3, r3, r2
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	011c      	lsls	r4, r3, #4
 80062e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80062f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062f8:	4642      	mov	r2, r8
 80062fa:	464b      	mov	r3, r9
 80062fc:	1891      	adds	r1, r2, r2
 80062fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006300:	415b      	adcs	r3, r3
 8006302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006308:	4641      	mov	r1, r8
 800630a:	eb12 0a01 	adds.w	sl, r2, r1
 800630e:	4649      	mov	r1, r9
 8006310:	eb43 0b01 	adc.w	fp, r3, r1
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006320:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006328:	4692      	mov	sl, r2
 800632a:	469b      	mov	fp, r3
 800632c:	4643      	mov	r3, r8
 800632e:	eb1a 0303 	adds.w	r3, sl, r3
 8006332:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006336:	464b      	mov	r3, r9
 8006338:	eb4b 0303 	adc.w	r3, fp, r3
 800633c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800634c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006350:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006354:	460b      	mov	r3, r1
 8006356:	18db      	adds	r3, r3, r3
 8006358:	643b      	str	r3, [r7, #64]	; 0x40
 800635a:	4613      	mov	r3, r2
 800635c:	eb42 0303 	adc.w	r3, r2, r3
 8006360:	647b      	str	r3, [r7, #68]	; 0x44
 8006362:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006366:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800636a:	f7fa fba7 	bl	8000abc <__aeabi_uldivmod>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4611      	mov	r1, r2
 8006374:	4b3b      	ldr	r3, [pc, #236]	; (8006464 <UART_SetConfig+0x2d4>)
 8006376:	fba3 2301 	umull	r2, r3, r3, r1
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	2264      	movs	r2, #100	; 0x64
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	1acb      	subs	r3, r1, r3
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800638a:	4b36      	ldr	r3, [pc, #216]	; (8006464 <UART_SetConfig+0x2d4>)
 800638c:	fba3 2302 	umull	r2, r3, r3, r2
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006398:	441c      	add	r4, r3
 800639a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	1891      	adds	r1, r2, r2
 80063b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80063b4:	415b      	adcs	r3, r3
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063bc:	4641      	mov	r1, r8
 80063be:	1851      	adds	r1, r2, r1
 80063c0:	6339      	str	r1, [r7, #48]	; 0x30
 80063c2:	4649      	mov	r1, r9
 80063c4:	414b      	adcs	r3, r1
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063d4:	4659      	mov	r1, fp
 80063d6:	00cb      	lsls	r3, r1, #3
 80063d8:	4651      	mov	r1, sl
 80063da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063de:	4651      	mov	r1, sl
 80063e0:	00ca      	lsls	r2, r1, #3
 80063e2:	4610      	mov	r0, r2
 80063e4:	4619      	mov	r1, r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	4642      	mov	r2, r8
 80063ea:	189b      	adds	r3, r3, r2
 80063ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063f0:	464b      	mov	r3, r9
 80063f2:	460a      	mov	r2, r1
 80063f4:	eb42 0303 	adc.w	r3, r2, r3
 80063f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006408:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800640c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006410:	460b      	mov	r3, r1
 8006412:	18db      	adds	r3, r3, r3
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28
 8006416:	4613      	mov	r3, r2
 8006418:	eb42 0303 	adc.w	r3, r2, r3
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800641e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006422:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006426:	f7fa fb49 	bl	8000abc <__aeabi_uldivmod>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <UART_SetConfig+0x2d4>)
 8006430:	fba3 1302 	umull	r1, r3, r3, r2
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	2164      	movs	r1, #100	; 0x64
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	3332      	adds	r3, #50	; 0x32
 8006442:	4a08      	ldr	r2, [pc, #32]	; (8006464 <UART_SetConfig+0x2d4>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	f003 0207 	and.w	r2, r3, #7
 800644e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4422      	add	r2, r4
 8006456:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006458:	e105      	b.n	8006666 <UART_SetConfig+0x4d6>
 800645a:	bf00      	nop
 800645c:	40011000 	.word	0x40011000
 8006460:	40011400 	.word	0x40011400
 8006464:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800646c:	2200      	movs	r2, #0
 800646e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006472:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006476:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800647a:	4642      	mov	r2, r8
 800647c:	464b      	mov	r3, r9
 800647e:	1891      	adds	r1, r2, r2
 8006480:	6239      	str	r1, [r7, #32]
 8006482:	415b      	adcs	r3, r3
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
 8006486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800648a:	4641      	mov	r1, r8
 800648c:	1854      	adds	r4, r2, r1
 800648e:	4649      	mov	r1, r9
 8006490:	eb43 0501 	adc.w	r5, r3, r1
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	00eb      	lsls	r3, r5, #3
 800649e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064a2:	00e2      	lsls	r2, r4, #3
 80064a4:	4614      	mov	r4, r2
 80064a6:	461d      	mov	r5, r3
 80064a8:	4643      	mov	r3, r8
 80064aa:	18e3      	adds	r3, r4, r3
 80064ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064b0:	464b      	mov	r3, r9
 80064b2:	eb45 0303 	adc.w	r3, r5, r3
 80064b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064d6:	4629      	mov	r1, r5
 80064d8:	008b      	lsls	r3, r1, #2
 80064da:	4621      	mov	r1, r4
 80064dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064e0:	4621      	mov	r1, r4
 80064e2:	008a      	lsls	r2, r1, #2
 80064e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064e8:	f7fa fae8 	bl	8000abc <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4b60      	ldr	r3, [pc, #384]	; (8006674 <UART_SetConfig+0x4e4>)
 80064f2:	fba3 2302 	umull	r2, r3, r3, r2
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	011c      	lsls	r4, r3, #4
 80064fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006504:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006508:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	1891      	adds	r1, r2, r2
 8006512:	61b9      	str	r1, [r7, #24]
 8006514:	415b      	adcs	r3, r3
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800651c:	4641      	mov	r1, r8
 800651e:	1851      	adds	r1, r2, r1
 8006520:	6139      	str	r1, [r7, #16]
 8006522:	4649      	mov	r1, r9
 8006524:	414b      	adcs	r3, r1
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006534:	4659      	mov	r1, fp
 8006536:	00cb      	lsls	r3, r1, #3
 8006538:	4651      	mov	r1, sl
 800653a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800653e:	4651      	mov	r1, sl
 8006540:	00ca      	lsls	r2, r1, #3
 8006542:	4610      	mov	r0, r2
 8006544:	4619      	mov	r1, r3
 8006546:	4603      	mov	r3, r0
 8006548:	4642      	mov	r2, r8
 800654a:	189b      	adds	r3, r3, r2
 800654c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006550:	464b      	mov	r3, r9
 8006552:	460a      	mov	r2, r1
 8006554:	eb42 0303 	adc.w	r3, r2, r3
 8006558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	67bb      	str	r3, [r7, #120]	; 0x78
 8006566:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006574:	4649      	mov	r1, r9
 8006576:	008b      	lsls	r3, r1, #2
 8006578:	4641      	mov	r1, r8
 800657a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800657e:	4641      	mov	r1, r8
 8006580:	008a      	lsls	r2, r1, #2
 8006582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006586:	f7fa fa99 	bl	8000abc <__aeabi_uldivmod>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4b39      	ldr	r3, [pc, #228]	; (8006674 <UART_SetConfig+0x4e4>)
 8006590:	fba3 1302 	umull	r1, r3, r3, r2
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	2164      	movs	r1, #100	; 0x64
 8006598:	fb01 f303 	mul.w	r3, r1, r3
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	3332      	adds	r3, #50	; 0x32
 80065a2:	4a34      	ldr	r2, [pc, #208]	; (8006674 <UART_SetConfig+0x4e4>)
 80065a4:	fba2 2303 	umull	r2, r3, r2, r3
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065ae:	441c      	add	r4, r3
 80065b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b4:	2200      	movs	r2, #0
 80065b6:	673b      	str	r3, [r7, #112]	; 0x70
 80065b8:	677a      	str	r2, [r7, #116]	; 0x74
 80065ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80065be:	4642      	mov	r2, r8
 80065c0:	464b      	mov	r3, r9
 80065c2:	1891      	adds	r1, r2, r2
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	415b      	adcs	r3, r3
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065ce:	4641      	mov	r1, r8
 80065d0:	1851      	adds	r1, r2, r1
 80065d2:	6039      	str	r1, [r7, #0]
 80065d4:	4649      	mov	r1, r9
 80065d6:	414b      	adcs	r3, r1
 80065d8:	607b      	str	r3, [r7, #4]
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065e6:	4659      	mov	r1, fp
 80065e8:	00cb      	lsls	r3, r1, #3
 80065ea:	4651      	mov	r1, sl
 80065ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065f0:	4651      	mov	r1, sl
 80065f2:	00ca      	lsls	r2, r1, #3
 80065f4:	4610      	mov	r0, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	4603      	mov	r3, r0
 80065fa:	4642      	mov	r2, r8
 80065fc:	189b      	adds	r3, r3, r2
 80065fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006600:	464b      	mov	r3, r9
 8006602:	460a      	mov	r2, r1
 8006604:	eb42 0303 	adc.w	r3, r2, r3
 8006608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800660a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	663b      	str	r3, [r7, #96]	; 0x60
 8006614:	667a      	str	r2, [r7, #100]	; 0x64
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006622:	4649      	mov	r1, r9
 8006624:	008b      	lsls	r3, r1, #2
 8006626:	4641      	mov	r1, r8
 8006628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800662c:	4641      	mov	r1, r8
 800662e:	008a      	lsls	r2, r1, #2
 8006630:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006634:	f7fa fa42 	bl	8000abc <__aeabi_uldivmod>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4b0d      	ldr	r3, [pc, #52]	; (8006674 <UART_SetConfig+0x4e4>)
 800663e:	fba3 1302 	umull	r1, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	2164      	movs	r1, #100	; 0x64
 8006646:	fb01 f303 	mul.w	r3, r1, r3
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	3332      	adds	r3, #50	; 0x32
 8006650:	4a08      	ldr	r2, [pc, #32]	; (8006674 <UART_SetConfig+0x4e4>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	f003 020f 	and.w	r2, r3, #15
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4422      	add	r2, r4
 8006664:	609a      	str	r2, [r3, #8]
}
 8006666:	bf00      	nop
 8006668:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800666c:	46bd      	mov	sp, r7
 800666e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006672:	bf00      	nop
 8006674:	51eb851f 	.word	0x51eb851f

08006678 <__errno>:
 8006678:	4b01      	ldr	r3, [pc, #4]	; (8006680 <__errno+0x8>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	2000000c 	.word	0x2000000c

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4d0d      	ldr	r5, [pc, #52]	; (80066bc <__libc_init_array+0x38>)
 8006688:	4c0d      	ldr	r4, [pc, #52]	; (80066c0 <__libc_init_array+0x3c>)
 800668a:	1b64      	subs	r4, r4, r5
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	2600      	movs	r6, #0
 8006690:	42a6      	cmp	r6, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	4d0b      	ldr	r5, [pc, #44]	; (80066c4 <__libc_init_array+0x40>)
 8006696:	4c0c      	ldr	r4, [pc, #48]	; (80066c8 <__libc_init_array+0x44>)
 8006698:	f000 fc96 	bl	8006fc8 <_init>
 800669c:	1b64      	subs	r4, r4, r5
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	2600      	movs	r6, #0
 80066a2:	42a6      	cmp	r6, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ac:	4798      	blx	r3
 80066ae:	3601      	adds	r6, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b6:	4798      	blx	r3
 80066b8:	3601      	adds	r6, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	08007b6c 	.word	0x08007b6c
 80066c0:	08007b6c 	.word	0x08007b6c
 80066c4:	08007b6c 	.word	0x08007b6c
 80066c8:	08007b70 	.word	0x08007b70

080066cc <memset>:
 80066cc:	4402      	add	r2, r0
 80066ce:	4603      	mov	r3, r0
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d100      	bne.n	80066d6 <memset+0xa>
 80066d4:	4770      	bx	lr
 80066d6:	f803 1b01 	strb.w	r1, [r3], #1
 80066da:	e7f9      	b.n	80066d0 <memset+0x4>

080066dc <siprintf>:
 80066dc:	b40e      	push	{r1, r2, r3}
 80066de:	b500      	push	{lr}
 80066e0:	b09c      	sub	sp, #112	; 0x70
 80066e2:	ab1d      	add	r3, sp, #116	; 0x74
 80066e4:	9002      	str	r0, [sp, #8]
 80066e6:	9006      	str	r0, [sp, #24]
 80066e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066ec:	4809      	ldr	r0, [pc, #36]	; (8006714 <siprintf+0x38>)
 80066ee:	9107      	str	r1, [sp, #28]
 80066f0:	9104      	str	r1, [sp, #16]
 80066f2:	4909      	ldr	r1, [pc, #36]	; (8006718 <siprintf+0x3c>)
 80066f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f8:	9105      	str	r1, [sp, #20]
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	a902      	add	r1, sp, #8
 8006700:	f000 f870 	bl	80067e4 <_svfiprintf_r>
 8006704:	9b02      	ldr	r3, [sp, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	b01c      	add	sp, #112	; 0x70
 800670c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006710:	b003      	add	sp, #12
 8006712:	4770      	bx	lr
 8006714:	2000000c 	.word	0x2000000c
 8006718:	ffff0208 	.word	0xffff0208

0800671c <strcpy>:
 800671c:	4603      	mov	r3, r0
 800671e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006722:	f803 2b01 	strb.w	r2, [r3], #1
 8006726:	2a00      	cmp	r2, #0
 8006728:	d1f9      	bne.n	800671e <strcpy+0x2>
 800672a:	4770      	bx	lr

0800672c <__ssputs_r>:
 800672c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006730:	688e      	ldr	r6, [r1, #8]
 8006732:	429e      	cmp	r6, r3
 8006734:	4682      	mov	sl, r0
 8006736:	460c      	mov	r4, r1
 8006738:	4690      	mov	r8, r2
 800673a:	461f      	mov	r7, r3
 800673c:	d838      	bhi.n	80067b0 <__ssputs_r+0x84>
 800673e:	898a      	ldrh	r2, [r1, #12]
 8006740:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006744:	d032      	beq.n	80067ac <__ssputs_r+0x80>
 8006746:	6825      	ldr	r5, [r4, #0]
 8006748:	6909      	ldr	r1, [r1, #16]
 800674a:	eba5 0901 	sub.w	r9, r5, r1
 800674e:	6965      	ldr	r5, [r4, #20]
 8006750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006758:	3301      	adds	r3, #1
 800675a:	444b      	add	r3, r9
 800675c:	106d      	asrs	r5, r5, #1
 800675e:	429d      	cmp	r5, r3
 8006760:	bf38      	it	cc
 8006762:	461d      	movcc	r5, r3
 8006764:	0553      	lsls	r3, r2, #21
 8006766:	d531      	bpl.n	80067cc <__ssputs_r+0xa0>
 8006768:	4629      	mov	r1, r5
 800676a:	f000 fb63 	bl	8006e34 <_malloc_r>
 800676e:	4606      	mov	r6, r0
 8006770:	b950      	cbnz	r0, 8006788 <__ssputs_r+0x5c>
 8006772:	230c      	movs	r3, #12
 8006774:	f8ca 3000 	str.w	r3, [sl]
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006788:	6921      	ldr	r1, [r4, #16]
 800678a:	464a      	mov	r2, r9
 800678c:	f000 fabe 	bl	8006d0c <memcpy>
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679a:	81a3      	strh	r3, [r4, #12]
 800679c:	6126      	str	r6, [r4, #16]
 800679e:	6165      	str	r5, [r4, #20]
 80067a0:	444e      	add	r6, r9
 80067a2:	eba5 0509 	sub.w	r5, r5, r9
 80067a6:	6026      	str	r6, [r4, #0]
 80067a8:	60a5      	str	r5, [r4, #8]
 80067aa:	463e      	mov	r6, r7
 80067ac:	42be      	cmp	r6, r7
 80067ae:	d900      	bls.n	80067b2 <__ssputs_r+0x86>
 80067b0:	463e      	mov	r6, r7
 80067b2:	6820      	ldr	r0, [r4, #0]
 80067b4:	4632      	mov	r2, r6
 80067b6:	4641      	mov	r1, r8
 80067b8:	f000 fab6 	bl	8006d28 <memmove>
 80067bc:	68a3      	ldr	r3, [r4, #8]
 80067be:	1b9b      	subs	r3, r3, r6
 80067c0:	60a3      	str	r3, [r4, #8]
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	4433      	add	r3, r6
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	2000      	movs	r0, #0
 80067ca:	e7db      	b.n	8006784 <__ssputs_r+0x58>
 80067cc:	462a      	mov	r2, r5
 80067ce:	f000 fba5 	bl	8006f1c <_realloc_r>
 80067d2:	4606      	mov	r6, r0
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d1e1      	bne.n	800679c <__ssputs_r+0x70>
 80067d8:	6921      	ldr	r1, [r4, #16]
 80067da:	4650      	mov	r0, sl
 80067dc:	f000 fabe 	bl	8006d5c <_free_r>
 80067e0:	e7c7      	b.n	8006772 <__ssputs_r+0x46>
	...

080067e4 <_svfiprintf_r>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	4698      	mov	r8, r3
 80067ea:	898b      	ldrh	r3, [r1, #12]
 80067ec:	061b      	lsls	r3, r3, #24
 80067ee:	b09d      	sub	sp, #116	; 0x74
 80067f0:	4607      	mov	r7, r0
 80067f2:	460d      	mov	r5, r1
 80067f4:	4614      	mov	r4, r2
 80067f6:	d50e      	bpl.n	8006816 <_svfiprintf_r+0x32>
 80067f8:	690b      	ldr	r3, [r1, #16]
 80067fa:	b963      	cbnz	r3, 8006816 <_svfiprintf_r+0x32>
 80067fc:	2140      	movs	r1, #64	; 0x40
 80067fe:	f000 fb19 	bl	8006e34 <_malloc_r>
 8006802:	6028      	str	r0, [r5, #0]
 8006804:	6128      	str	r0, [r5, #16]
 8006806:	b920      	cbnz	r0, 8006812 <_svfiprintf_r+0x2e>
 8006808:	230c      	movs	r3, #12
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	e0d1      	b.n	80069b6 <_svfiprintf_r+0x1d2>
 8006812:	2340      	movs	r3, #64	; 0x40
 8006814:	616b      	str	r3, [r5, #20]
 8006816:	2300      	movs	r3, #0
 8006818:	9309      	str	r3, [sp, #36]	; 0x24
 800681a:	2320      	movs	r3, #32
 800681c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006820:	f8cd 800c 	str.w	r8, [sp, #12]
 8006824:	2330      	movs	r3, #48	; 0x30
 8006826:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069d0 <_svfiprintf_r+0x1ec>
 800682a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800682e:	f04f 0901 	mov.w	r9, #1
 8006832:	4623      	mov	r3, r4
 8006834:	469a      	mov	sl, r3
 8006836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800683a:	b10a      	cbz	r2, 8006840 <_svfiprintf_r+0x5c>
 800683c:	2a25      	cmp	r2, #37	; 0x25
 800683e:	d1f9      	bne.n	8006834 <_svfiprintf_r+0x50>
 8006840:	ebba 0b04 	subs.w	fp, sl, r4
 8006844:	d00b      	beq.n	800685e <_svfiprintf_r+0x7a>
 8006846:	465b      	mov	r3, fp
 8006848:	4622      	mov	r2, r4
 800684a:	4629      	mov	r1, r5
 800684c:	4638      	mov	r0, r7
 800684e:	f7ff ff6d 	bl	800672c <__ssputs_r>
 8006852:	3001      	adds	r0, #1
 8006854:	f000 80aa 	beq.w	80069ac <_svfiprintf_r+0x1c8>
 8006858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800685a:	445a      	add	r2, fp
 800685c:	9209      	str	r2, [sp, #36]	; 0x24
 800685e:	f89a 3000 	ldrb.w	r3, [sl]
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80a2 	beq.w	80069ac <_svfiprintf_r+0x1c8>
 8006868:	2300      	movs	r3, #0
 800686a:	f04f 32ff 	mov.w	r2, #4294967295
 800686e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006872:	f10a 0a01 	add.w	sl, sl, #1
 8006876:	9304      	str	r3, [sp, #16]
 8006878:	9307      	str	r3, [sp, #28]
 800687a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800687e:	931a      	str	r3, [sp, #104]	; 0x68
 8006880:	4654      	mov	r4, sl
 8006882:	2205      	movs	r2, #5
 8006884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006888:	4851      	ldr	r0, [pc, #324]	; (80069d0 <_svfiprintf_r+0x1ec>)
 800688a:	f7f9 fca9 	bl	80001e0 <memchr>
 800688e:	9a04      	ldr	r2, [sp, #16]
 8006890:	b9d8      	cbnz	r0, 80068ca <_svfiprintf_r+0xe6>
 8006892:	06d0      	lsls	r0, r2, #27
 8006894:	bf44      	itt	mi
 8006896:	2320      	movmi	r3, #32
 8006898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800689c:	0711      	lsls	r1, r2, #28
 800689e:	bf44      	itt	mi
 80068a0:	232b      	movmi	r3, #43	; 0x2b
 80068a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068a6:	f89a 3000 	ldrb.w	r3, [sl]
 80068aa:	2b2a      	cmp	r3, #42	; 0x2a
 80068ac:	d015      	beq.n	80068da <_svfiprintf_r+0xf6>
 80068ae:	9a07      	ldr	r2, [sp, #28]
 80068b0:	4654      	mov	r4, sl
 80068b2:	2000      	movs	r0, #0
 80068b4:	f04f 0c0a 	mov.w	ip, #10
 80068b8:	4621      	mov	r1, r4
 80068ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068be:	3b30      	subs	r3, #48	; 0x30
 80068c0:	2b09      	cmp	r3, #9
 80068c2:	d94e      	bls.n	8006962 <_svfiprintf_r+0x17e>
 80068c4:	b1b0      	cbz	r0, 80068f4 <_svfiprintf_r+0x110>
 80068c6:	9207      	str	r2, [sp, #28]
 80068c8:	e014      	b.n	80068f4 <_svfiprintf_r+0x110>
 80068ca:	eba0 0308 	sub.w	r3, r0, r8
 80068ce:	fa09 f303 	lsl.w	r3, r9, r3
 80068d2:	4313      	orrs	r3, r2
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	46a2      	mov	sl, r4
 80068d8:	e7d2      	b.n	8006880 <_svfiprintf_r+0x9c>
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	1d19      	adds	r1, r3, #4
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	9103      	str	r1, [sp, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bfbb      	ittet	lt
 80068e6:	425b      	neglt	r3, r3
 80068e8:	f042 0202 	orrlt.w	r2, r2, #2
 80068ec:	9307      	strge	r3, [sp, #28]
 80068ee:	9307      	strlt	r3, [sp, #28]
 80068f0:	bfb8      	it	lt
 80068f2:	9204      	strlt	r2, [sp, #16]
 80068f4:	7823      	ldrb	r3, [r4, #0]
 80068f6:	2b2e      	cmp	r3, #46	; 0x2e
 80068f8:	d10c      	bne.n	8006914 <_svfiprintf_r+0x130>
 80068fa:	7863      	ldrb	r3, [r4, #1]
 80068fc:	2b2a      	cmp	r3, #42	; 0x2a
 80068fe:	d135      	bne.n	800696c <_svfiprintf_r+0x188>
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	1d1a      	adds	r2, r3, #4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	9203      	str	r2, [sp, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	bfb8      	it	lt
 800690c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006910:	3402      	adds	r4, #2
 8006912:	9305      	str	r3, [sp, #20]
 8006914:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069e0 <_svfiprintf_r+0x1fc>
 8006918:	7821      	ldrb	r1, [r4, #0]
 800691a:	2203      	movs	r2, #3
 800691c:	4650      	mov	r0, sl
 800691e:	f7f9 fc5f 	bl	80001e0 <memchr>
 8006922:	b140      	cbz	r0, 8006936 <_svfiprintf_r+0x152>
 8006924:	2340      	movs	r3, #64	; 0x40
 8006926:	eba0 000a 	sub.w	r0, r0, sl
 800692a:	fa03 f000 	lsl.w	r0, r3, r0
 800692e:	9b04      	ldr	r3, [sp, #16]
 8006930:	4303      	orrs	r3, r0
 8006932:	3401      	adds	r4, #1
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800693a:	4826      	ldr	r0, [pc, #152]	; (80069d4 <_svfiprintf_r+0x1f0>)
 800693c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006940:	2206      	movs	r2, #6
 8006942:	f7f9 fc4d 	bl	80001e0 <memchr>
 8006946:	2800      	cmp	r0, #0
 8006948:	d038      	beq.n	80069bc <_svfiprintf_r+0x1d8>
 800694a:	4b23      	ldr	r3, [pc, #140]	; (80069d8 <_svfiprintf_r+0x1f4>)
 800694c:	bb1b      	cbnz	r3, 8006996 <_svfiprintf_r+0x1b2>
 800694e:	9b03      	ldr	r3, [sp, #12]
 8006950:	3307      	adds	r3, #7
 8006952:	f023 0307 	bic.w	r3, r3, #7
 8006956:	3308      	adds	r3, #8
 8006958:	9303      	str	r3, [sp, #12]
 800695a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695c:	4433      	add	r3, r6
 800695e:	9309      	str	r3, [sp, #36]	; 0x24
 8006960:	e767      	b.n	8006832 <_svfiprintf_r+0x4e>
 8006962:	fb0c 3202 	mla	r2, ip, r2, r3
 8006966:	460c      	mov	r4, r1
 8006968:	2001      	movs	r0, #1
 800696a:	e7a5      	b.n	80068b8 <_svfiprintf_r+0xd4>
 800696c:	2300      	movs	r3, #0
 800696e:	3401      	adds	r4, #1
 8006970:	9305      	str	r3, [sp, #20]
 8006972:	4619      	mov	r1, r3
 8006974:	f04f 0c0a 	mov.w	ip, #10
 8006978:	4620      	mov	r0, r4
 800697a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800697e:	3a30      	subs	r2, #48	; 0x30
 8006980:	2a09      	cmp	r2, #9
 8006982:	d903      	bls.n	800698c <_svfiprintf_r+0x1a8>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0c5      	beq.n	8006914 <_svfiprintf_r+0x130>
 8006988:	9105      	str	r1, [sp, #20]
 800698a:	e7c3      	b.n	8006914 <_svfiprintf_r+0x130>
 800698c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006990:	4604      	mov	r4, r0
 8006992:	2301      	movs	r3, #1
 8006994:	e7f0      	b.n	8006978 <_svfiprintf_r+0x194>
 8006996:	ab03      	add	r3, sp, #12
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	462a      	mov	r2, r5
 800699c:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <_svfiprintf_r+0x1f8>)
 800699e:	a904      	add	r1, sp, #16
 80069a0:	4638      	mov	r0, r7
 80069a2:	f3af 8000 	nop.w
 80069a6:	1c42      	adds	r2, r0, #1
 80069a8:	4606      	mov	r6, r0
 80069aa:	d1d6      	bne.n	800695a <_svfiprintf_r+0x176>
 80069ac:	89ab      	ldrh	r3, [r5, #12]
 80069ae:	065b      	lsls	r3, r3, #25
 80069b0:	f53f af2c 	bmi.w	800680c <_svfiprintf_r+0x28>
 80069b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069b6:	b01d      	add	sp, #116	; 0x74
 80069b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069bc:	ab03      	add	r3, sp, #12
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	462a      	mov	r2, r5
 80069c2:	4b06      	ldr	r3, [pc, #24]	; (80069dc <_svfiprintf_r+0x1f8>)
 80069c4:	a904      	add	r1, sp, #16
 80069c6:	4638      	mov	r0, r7
 80069c8:	f000 f87a 	bl	8006ac0 <_printf_i>
 80069cc:	e7eb      	b.n	80069a6 <_svfiprintf_r+0x1c2>
 80069ce:	bf00      	nop
 80069d0:	08007b30 	.word	0x08007b30
 80069d4:	08007b3a 	.word	0x08007b3a
 80069d8:	00000000 	.word	0x00000000
 80069dc:	0800672d 	.word	0x0800672d
 80069e0:	08007b36 	.word	0x08007b36

080069e4 <_printf_common>:
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	4616      	mov	r6, r2
 80069ea:	4699      	mov	r9, r3
 80069ec:	688a      	ldr	r2, [r1, #8]
 80069ee:	690b      	ldr	r3, [r1, #16]
 80069f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	bfb8      	it	lt
 80069f8:	4613      	movlt	r3, r2
 80069fa:	6033      	str	r3, [r6, #0]
 80069fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a00:	4607      	mov	r7, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	b10a      	cbz	r2, 8006a0a <_printf_common+0x26>
 8006a06:	3301      	adds	r3, #1
 8006a08:	6033      	str	r3, [r6, #0]
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	0699      	lsls	r1, r3, #26
 8006a0e:	bf42      	ittt	mi
 8006a10:	6833      	ldrmi	r3, [r6, #0]
 8006a12:	3302      	addmi	r3, #2
 8006a14:	6033      	strmi	r3, [r6, #0]
 8006a16:	6825      	ldr	r5, [r4, #0]
 8006a18:	f015 0506 	ands.w	r5, r5, #6
 8006a1c:	d106      	bne.n	8006a2c <_printf_common+0x48>
 8006a1e:	f104 0a19 	add.w	sl, r4, #25
 8006a22:	68e3      	ldr	r3, [r4, #12]
 8006a24:	6832      	ldr	r2, [r6, #0]
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	42ab      	cmp	r3, r5
 8006a2a:	dc26      	bgt.n	8006a7a <_printf_common+0x96>
 8006a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a30:	1e13      	subs	r3, r2, #0
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	bf18      	it	ne
 8006a36:	2301      	movne	r3, #1
 8006a38:	0692      	lsls	r2, r2, #26
 8006a3a:	d42b      	bmi.n	8006a94 <_printf_common+0xb0>
 8006a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a40:	4649      	mov	r1, r9
 8006a42:	4638      	mov	r0, r7
 8006a44:	47c0      	blx	r8
 8006a46:	3001      	adds	r0, #1
 8006a48:	d01e      	beq.n	8006a88 <_printf_common+0xa4>
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	68e5      	ldr	r5, [r4, #12]
 8006a4e:	6832      	ldr	r2, [r6, #0]
 8006a50:	f003 0306 	and.w	r3, r3, #6
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	bf08      	it	eq
 8006a58:	1aad      	subeq	r5, r5, r2
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	6922      	ldr	r2, [r4, #16]
 8006a5e:	bf0c      	ite	eq
 8006a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a64:	2500      	movne	r5, #0
 8006a66:	4293      	cmp	r3, r2
 8006a68:	bfc4      	itt	gt
 8006a6a:	1a9b      	subgt	r3, r3, r2
 8006a6c:	18ed      	addgt	r5, r5, r3
 8006a6e:	2600      	movs	r6, #0
 8006a70:	341a      	adds	r4, #26
 8006a72:	42b5      	cmp	r5, r6
 8006a74:	d11a      	bne.n	8006aac <_printf_common+0xc8>
 8006a76:	2000      	movs	r0, #0
 8006a78:	e008      	b.n	8006a8c <_printf_common+0xa8>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4652      	mov	r2, sl
 8006a7e:	4649      	mov	r1, r9
 8006a80:	4638      	mov	r0, r7
 8006a82:	47c0      	blx	r8
 8006a84:	3001      	adds	r0, #1
 8006a86:	d103      	bne.n	8006a90 <_printf_common+0xac>
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a90:	3501      	adds	r5, #1
 8006a92:	e7c6      	b.n	8006a22 <_printf_common+0x3e>
 8006a94:	18e1      	adds	r1, r4, r3
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	2030      	movs	r0, #48	; 0x30
 8006a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a9e:	4422      	add	r2, r4
 8006aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aa8:	3302      	adds	r3, #2
 8006aaa:	e7c7      	b.n	8006a3c <_printf_common+0x58>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4622      	mov	r2, r4
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	47c0      	blx	r8
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d0e6      	beq.n	8006a88 <_printf_common+0xa4>
 8006aba:	3601      	adds	r6, #1
 8006abc:	e7d9      	b.n	8006a72 <_printf_common+0x8e>
	...

08006ac0 <_printf_i>:
 8006ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac4:	7e0f      	ldrb	r7, [r1, #24]
 8006ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ac8:	2f78      	cmp	r7, #120	; 0x78
 8006aca:	4691      	mov	r9, r2
 8006acc:	4680      	mov	r8, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	469a      	mov	sl, r3
 8006ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ad6:	d807      	bhi.n	8006ae8 <_printf_i+0x28>
 8006ad8:	2f62      	cmp	r7, #98	; 0x62
 8006ada:	d80a      	bhi.n	8006af2 <_printf_i+0x32>
 8006adc:	2f00      	cmp	r7, #0
 8006ade:	f000 80d8 	beq.w	8006c92 <_printf_i+0x1d2>
 8006ae2:	2f58      	cmp	r7, #88	; 0x58
 8006ae4:	f000 80a3 	beq.w	8006c2e <_printf_i+0x16e>
 8006ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006af0:	e03a      	b.n	8006b68 <_printf_i+0xa8>
 8006af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006af6:	2b15      	cmp	r3, #21
 8006af8:	d8f6      	bhi.n	8006ae8 <_printf_i+0x28>
 8006afa:	a101      	add	r1, pc, #4	; (adr r1, 8006b00 <_printf_i+0x40>)
 8006afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b00:	08006b59 	.word	0x08006b59
 8006b04:	08006b6d 	.word	0x08006b6d
 8006b08:	08006ae9 	.word	0x08006ae9
 8006b0c:	08006ae9 	.word	0x08006ae9
 8006b10:	08006ae9 	.word	0x08006ae9
 8006b14:	08006ae9 	.word	0x08006ae9
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006ae9 	.word	0x08006ae9
 8006b20:	08006ae9 	.word	0x08006ae9
 8006b24:	08006ae9 	.word	0x08006ae9
 8006b28:	08006ae9 	.word	0x08006ae9
 8006b2c:	08006c79 	.word	0x08006c79
 8006b30:	08006b9d 	.word	0x08006b9d
 8006b34:	08006c5b 	.word	0x08006c5b
 8006b38:	08006ae9 	.word	0x08006ae9
 8006b3c:	08006ae9 	.word	0x08006ae9
 8006b40:	08006c9b 	.word	0x08006c9b
 8006b44:	08006ae9 	.word	0x08006ae9
 8006b48:	08006b9d 	.word	0x08006b9d
 8006b4c:	08006ae9 	.word	0x08006ae9
 8006b50:	08006ae9 	.word	0x08006ae9
 8006b54:	08006c63 	.word	0x08006c63
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	1d1a      	adds	r2, r3, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	602a      	str	r2, [r5, #0]
 8006b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e0a3      	b.n	8006cb4 <_printf_i+0x1f4>
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	6829      	ldr	r1, [r5, #0]
 8006b70:	0606      	lsls	r6, r0, #24
 8006b72:	f101 0304 	add.w	r3, r1, #4
 8006b76:	d50a      	bpl.n	8006b8e <_printf_i+0xce>
 8006b78:	680e      	ldr	r6, [r1, #0]
 8006b7a:	602b      	str	r3, [r5, #0]
 8006b7c:	2e00      	cmp	r6, #0
 8006b7e:	da03      	bge.n	8006b88 <_printf_i+0xc8>
 8006b80:	232d      	movs	r3, #45	; 0x2d
 8006b82:	4276      	negs	r6, r6
 8006b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b88:	485e      	ldr	r0, [pc, #376]	; (8006d04 <_printf_i+0x244>)
 8006b8a:	230a      	movs	r3, #10
 8006b8c:	e019      	b.n	8006bc2 <_printf_i+0x102>
 8006b8e:	680e      	ldr	r6, [r1, #0]
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b96:	bf18      	it	ne
 8006b98:	b236      	sxthne	r6, r6
 8006b9a:	e7ef      	b.n	8006b7c <_printf_i+0xbc>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	6820      	ldr	r0, [r4, #0]
 8006ba0:	1d19      	adds	r1, r3, #4
 8006ba2:	6029      	str	r1, [r5, #0]
 8006ba4:	0601      	lsls	r1, r0, #24
 8006ba6:	d501      	bpl.n	8006bac <_printf_i+0xec>
 8006ba8:	681e      	ldr	r6, [r3, #0]
 8006baa:	e002      	b.n	8006bb2 <_printf_i+0xf2>
 8006bac:	0646      	lsls	r6, r0, #25
 8006bae:	d5fb      	bpl.n	8006ba8 <_printf_i+0xe8>
 8006bb0:	881e      	ldrh	r6, [r3, #0]
 8006bb2:	4854      	ldr	r0, [pc, #336]	; (8006d04 <_printf_i+0x244>)
 8006bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8006bb6:	bf0c      	ite	eq
 8006bb8:	2308      	moveq	r3, #8
 8006bba:	230a      	movne	r3, #10
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bc2:	6865      	ldr	r5, [r4, #4]
 8006bc4:	60a5      	str	r5, [r4, #8]
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	bfa2      	ittt	ge
 8006bca:	6821      	ldrge	r1, [r4, #0]
 8006bcc:	f021 0104 	bicge.w	r1, r1, #4
 8006bd0:	6021      	strge	r1, [r4, #0]
 8006bd2:	b90e      	cbnz	r6, 8006bd8 <_printf_i+0x118>
 8006bd4:	2d00      	cmp	r5, #0
 8006bd6:	d04d      	beq.n	8006c74 <_printf_i+0x1b4>
 8006bd8:	4615      	mov	r5, r2
 8006bda:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bde:	fb03 6711 	mls	r7, r3, r1, r6
 8006be2:	5dc7      	ldrb	r7, [r0, r7]
 8006be4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006be8:	4637      	mov	r7, r6
 8006bea:	42bb      	cmp	r3, r7
 8006bec:	460e      	mov	r6, r1
 8006bee:	d9f4      	bls.n	8006bda <_printf_i+0x11a>
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d10b      	bne.n	8006c0c <_printf_i+0x14c>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	07de      	lsls	r6, r3, #31
 8006bf8:	d508      	bpl.n	8006c0c <_printf_i+0x14c>
 8006bfa:	6923      	ldr	r3, [r4, #16]
 8006bfc:	6861      	ldr	r1, [r4, #4]
 8006bfe:	4299      	cmp	r1, r3
 8006c00:	bfde      	ittt	le
 8006c02:	2330      	movle	r3, #48	; 0x30
 8006c04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c0c:	1b52      	subs	r2, r2, r5
 8006c0e:	6122      	str	r2, [r4, #16]
 8006c10:	f8cd a000 	str.w	sl, [sp]
 8006c14:	464b      	mov	r3, r9
 8006c16:	aa03      	add	r2, sp, #12
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	f7ff fee2 	bl	80069e4 <_printf_common>
 8006c20:	3001      	adds	r0, #1
 8006c22:	d14c      	bne.n	8006cbe <_printf_i+0x1fe>
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	b004      	add	sp, #16
 8006c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2e:	4835      	ldr	r0, [pc, #212]	; (8006d04 <_printf_i+0x244>)
 8006c30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c34:	6829      	ldr	r1, [r5, #0]
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c3c:	6029      	str	r1, [r5, #0]
 8006c3e:	061d      	lsls	r5, r3, #24
 8006c40:	d514      	bpl.n	8006c6c <_printf_i+0x1ac>
 8006c42:	07df      	lsls	r7, r3, #31
 8006c44:	bf44      	itt	mi
 8006c46:	f043 0320 	orrmi.w	r3, r3, #32
 8006c4a:	6023      	strmi	r3, [r4, #0]
 8006c4c:	b91e      	cbnz	r6, 8006c56 <_printf_i+0x196>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	f023 0320 	bic.w	r3, r3, #32
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	2310      	movs	r3, #16
 8006c58:	e7b0      	b.n	8006bbc <_printf_i+0xfc>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	f043 0320 	orr.w	r3, r3, #32
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	2378      	movs	r3, #120	; 0x78
 8006c64:	4828      	ldr	r0, [pc, #160]	; (8006d08 <_printf_i+0x248>)
 8006c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c6a:	e7e3      	b.n	8006c34 <_printf_i+0x174>
 8006c6c:	0659      	lsls	r1, r3, #25
 8006c6e:	bf48      	it	mi
 8006c70:	b2b6      	uxthmi	r6, r6
 8006c72:	e7e6      	b.n	8006c42 <_printf_i+0x182>
 8006c74:	4615      	mov	r5, r2
 8006c76:	e7bb      	b.n	8006bf0 <_printf_i+0x130>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	6826      	ldr	r6, [r4, #0]
 8006c7c:	6961      	ldr	r1, [r4, #20]
 8006c7e:	1d18      	adds	r0, r3, #4
 8006c80:	6028      	str	r0, [r5, #0]
 8006c82:	0635      	lsls	r5, r6, #24
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	d501      	bpl.n	8006c8c <_printf_i+0x1cc>
 8006c88:	6019      	str	r1, [r3, #0]
 8006c8a:	e002      	b.n	8006c92 <_printf_i+0x1d2>
 8006c8c:	0670      	lsls	r0, r6, #25
 8006c8e:	d5fb      	bpl.n	8006c88 <_printf_i+0x1c8>
 8006c90:	8019      	strh	r1, [r3, #0]
 8006c92:	2300      	movs	r3, #0
 8006c94:	6123      	str	r3, [r4, #16]
 8006c96:	4615      	mov	r5, r2
 8006c98:	e7ba      	b.n	8006c10 <_printf_i+0x150>
 8006c9a:	682b      	ldr	r3, [r5, #0]
 8006c9c:	1d1a      	adds	r2, r3, #4
 8006c9e:	602a      	str	r2, [r5, #0]
 8006ca0:	681d      	ldr	r5, [r3, #0]
 8006ca2:	6862      	ldr	r2, [r4, #4]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f7f9 fa9a 	bl	80001e0 <memchr>
 8006cac:	b108      	cbz	r0, 8006cb2 <_printf_i+0x1f2>
 8006cae:	1b40      	subs	r0, r0, r5
 8006cb0:	6060      	str	r0, [r4, #4]
 8006cb2:	6863      	ldr	r3, [r4, #4]
 8006cb4:	6123      	str	r3, [r4, #16]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cbc:	e7a8      	b.n	8006c10 <_printf_i+0x150>
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	462a      	mov	r2, r5
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	47d0      	blx	sl
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d0ab      	beq.n	8006c24 <_printf_i+0x164>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	079b      	lsls	r3, r3, #30
 8006cd0:	d413      	bmi.n	8006cfa <_printf_i+0x23a>
 8006cd2:	68e0      	ldr	r0, [r4, #12]
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	4298      	cmp	r0, r3
 8006cd8:	bfb8      	it	lt
 8006cda:	4618      	movlt	r0, r3
 8006cdc:	e7a4      	b.n	8006c28 <_printf_i+0x168>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4632      	mov	r2, r6
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	47d0      	blx	sl
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d09b      	beq.n	8006c24 <_printf_i+0x164>
 8006cec:	3501      	adds	r5, #1
 8006cee:	68e3      	ldr	r3, [r4, #12]
 8006cf0:	9903      	ldr	r1, [sp, #12]
 8006cf2:	1a5b      	subs	r3, r3, r1
 8006cf4:	42ab      	cmp	r3, r5
 8006cf6:	dcf2      	bgt.n	8006cde <_printf_i+0x21e>
 8006cf8:	e7eb      	b.n	8006cd2 <_printf_i+0x212>
 8006cfa:	2500      	movs	r5, #0
 8006cfc:	f104 0619 	add.w	r6, r4, #25
 8006d00:	e7f5      	b.n	8006cee <_printf_i+0x22e>
 8006d02:	bf00      	nop
 8006d04:	08007b41 	.word	0x08007b41
 8006d08:	08007b52 	.word	0x08007b52

08006d0c <memcpy>:
 8006d0c:	440a      	add	r2, r1
 8006d0e:	4291      	cmp	r1, r2
 8006d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d14:	d100      	bne.n	8006d18 <memcpy+0xc>
 8006d16:	4770      	bx	lr
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d22:	4291      	cmp	r1, r2
 8006d24:	d1f9      	bne.n	8006d1a <memcpy+0xe>
 8006d26:	bd10      	pop	{r4, pc}

08006d28 <memmove>:
 8006d28:	4288      	cmp	r0, r1
 8006d2a:	b510      	push	{r4, lr}
 8006d2c:	eb01 0402 	add.w	r4, r1, r2
 8006d30:	d902      	bls.n	8006d38 <memmove+0x10>
 8006d32:	4284      	cmp	r4, r0
 8006d34:	4623      	mov	r3, r4
 8006d36:	d807      	bhi.n	8006d48 <memmove+0x20>
 8006d38:	1e43      	subs	r3, r0, #1
 8006d3a:	42a1      	cmp	r1, r4
 8006d3c:	d008      	beq.n	8006d50 <memmove+0x28>
 8006d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d46:	e7f8      	b.n	8006d3a <memmove+0x12>
 8006d48:	4402      	add	r2, r0
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	428a      	cmp	r2, r1
 8006d4e:	d100      	bne.n	8006d52 <memmove+0x2a>
 8006d50:	bd10      	pop	{r4, pc}
 8006d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d5a:	e7f7      	b.n	8006d4c <memmove+0x24>

08006d5c <_free_r>:
 8006d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d5e:	2900      	cmp	r1, #0
 8006d60:	d044      	beq.n	8006dec <_free_r+0x90>
 8006d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d66:	9001      	str	r0, [sp, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d6e:	bfb8      	it	lt
 8006d70:	18e4      	addlt	r4, r4, r3
 8006d72:	f000 f913 	bl	8006f9c <__malloc_lock>
 8006d76:	4a1e      	ldr	r2, [pc, #120]	; (8006df0 <_free_r+0x94>)
 8006d78:	9801      	ldr	r0, [sp, #4]
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	b933      	cbnz	r3, 8006d8c <_free_r+0x30>
 8006d7e:	6063      	str	r3, [r4, #4]
 8006d80:	6014      	str	r4, [r2, #0]
 8006d82:	b003      	add	sp, #12
 8006d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d88:	f000 b90e 	b.w	8006fa8 <__malloc_unlock>
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	d908      	bls.n	8006da2 <_free_r+0x46>
 8006d90:	6825      	ldr	r5, [r4, #0]
 8006d92:	1961      	adds	r1, r4, r5
 8006d94:	428b      	cmp	r3, r1
 8006d96:	bf01      	itttt	eq
 8006d98:	6819      	ldreq	r1, [r3, #0]
 8006d9a:	685b      	ldreq	r3, [r3, #4]
 8006d9c:	1949      	addeq	r1, r1, r5
 8006d9e:	6021      	streq	r1, [r4, #0]
 8006da0:	e7ed      	b.n	8006d7e <_free_r+0x22>
 8006da2:	461a      	mov	r2, r3
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	b10b      	cbz	r3, 8006dac <_free_r+0x50>
 8006da8:	42a3      	cmp	r3, r4
 8006daa:	d9fa      	bls.n	8006da2 <_free_r+0x46>
 8006dac:	6811      	ldr	r1, [r2, #0]
 8006dae:	1855      	adds	r5, r2, r1
 8006db0:	42a5      	cmp	r5, r4
 8006db2:	d10b      	bne.n	8006dcc <_free_r+0x70>
 8006db4:	6824      	ldr	r4, [r4, #0]
 8006db6:	4421      	add	r1, r4
 8006db8:	1854      	adds	r4, r2, r1
 8006dba:	42a3      	cmp	r3, r4
 8006dbc:	6011      	str	r1, [r2, #0]
 8006dbe:	d1e0      	bne.n	8006d82 <_free_r+0x26>
 8006dc0:	681c      	ldr	r4, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	6053      	str	r3, [r2, #4]
 8006dc6:	4421      	add	r1, r4
 8006dc8:	6011      	str	r1, [r2, #0]
 8006dca:	e7da      	b.n	8006d82 <_free_r+0x26>
 8006dcc:	d902      	bls.n	8006dd4 <_free_r+0x78>
 8006dce:	230c      	movs	r3, #12
 8006dd0:	6003      	str	r3, [r0, #0]
 8006dd2:	e7d6      	b.n	8006d82 <_free_r+0x26>
 8006dd4:	6825      	ldr	r5, [r4, #0]
 8006dd6:	1961      	adds	r1, r4, r5
 8006dd8:	428b      	cmp	r3, r1
 8006dda:	bf04      	itt	eq
 8006ddc:	6819      	ldreq	r1, [r3, #0]
 8006dde:	685b      	ldreq	r3, [r3, #4]
 8006de0:	6063      	str	r3, [r4, #4]
 8006de2:	bf04      	itt	eq
 8006de4:	1949      	addeq	r1, r1, r5
 8006de6:	6021      	streq	r1, [r4, #0]
 8006de8:	6054      	str	r4, [r2, #4]
 8006dea:	e7ca      	b.n	8006d82 <_free_r+0x26>
 8006dec:	b003      	add	sp, #12
 8006dee:	bd30      	pop	{r4, r5, pc}
 8006df0:	20000690 	.word	0x20000690

08006df4 <sbrk_aligned>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	4e0e      	ldr	r6, [pc, #56]	; (8006e30 <sbrk_aligned+0x3c>)
 8006df8:	460c      	mov	r4, r1
 8006dfa:	6831      	ldr	r1, [r6, #0]
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	b911      	cbnz	r1, 8006e06 <sbrk_aligned+0x12>
 8006e00:	f000 f8bc 	bl	8006f7c <_sbrk_r>
 8006e04:	6030      	str	r0, [r6, #0]
 8006e06:	4621      	mov	r1, r4
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f000 f8b7 	bl	8006f7c <_sbrk_r>
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d00a      	beq.n	8006e28 <sbrk_aligned+0x34>
 8006e12:	1cc4      	adds	r4, r0, #3
 8006e14:	f024 0403 	bic.w	r4, r4, #3
 8006e18:	42a0      	cmp	r0, r4
 8006e1a:	d007      	beq.n	8006e2c <sbrk_aligned+0x38>
 8006e1c:	1a21      	subs	r1, r4, r0
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f000 f8ac 	bl	8006f7c <_sbrk_r>
 8006e24:	3001      	adds	r0, #1
 8006e26:	d101      	bne.n	8006e2c <sbrk_aligned+0x38>
 8006e28:	f04f 34ff 	mov.w	r4, #4294967295
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	20000694 	.word	0x20000694

08006e34 <_malloc_r>:
 8006e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e38:	1ccd      	adds	r5, r1, #3
 8006e3a:	f025 0503 	bic.w	r5, r5, #3
 8006e3e:	3508      	adds	r5, #8
 8006e40:	2d0c      	cmp	r5, #12
 8006e42:	bf38      	it	cc
 8006e44:	250c      	movcc	r5, #12
 8006e46:	2d00      	cmp	r5, #0
 8006e48:	4607      	mov	r7, r0
 8006e4a:	db01      	blt.n	8006e50 <_malloc_r+0x1c>
 8006e4c:	42a9      	cmp	r1, r5
 8006e4e:	d905      	bls.n	8006e5c <_malloc_r+0x28>
 8006e50:	230c      	movs	r3, #12
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	2600      	movs	r6, #0
 8006e56:	4630      	mov	r0, r6
 8006e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e5c:	4e2e      	ldr	r6, [pc, #184]	; (8006f18 <_malloc_r+0xe4>)
 8006e5e:	f000 f89d 	bl	8006f9c <__malloc_lock>
 8006e62:	6833      	ldr	r3, [r6, #0]
 8006e64:	461c      	mov	r4, r3
 8006e66:	bb34      	cbnz	r4, 8006eb6 <_malloc_r+0x82>
 8006e68:	4629      	mov	r1, r5
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	f7ff ffc2 	bl	8006df4 <sbrk_aligned>
 8006e70:	1c43      	adds	r3, r0, #1
 8006e72:	4604      	mov	r4, r0
 8006e74:	d14d      	bne.n	8006f12 <_malloc_r+0xde>
 8006e76:	6834      	ldr	r4, [r6, #0]
 8006e78:	4626      	mov	r6, r4
 8006e7a:	2e00      	cmp	r6, #0
 8006e7c:	d140      	bne.n	8006f00 <_malloc_r+0xcc>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	4631      	mov	r1, r6
 8006e82:	4638      	mov	r0, r7
 8006e84:	eb04 0803 	add.w	r8, r4, r3
 8006e88:	f000 f878 	bl	8006f7c <_sbrk_r>
 8006e8c:	4580      	cmp	r8, r0
 8006e8e:	d13a      	bne.n	8006f06 <_malloc_r+0xd2>
 8006e90:	6821      	ldr	r1, [r4, #0]
 8006e92:	3503      	adds	r5, #3
 8006e94:	1a6d      	subs	r5, r5, r1
 8006e96:	f025 0503 	bic.w	r5, r5, #3
 8006e9a:	3508      	adds	r5, #8
 8006e9c:	2d0c      	cmp	r5, #12
 8006e9e:	bf38      	it	cc
 8006ea0:	250c      	movcc	r5, #12
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f7ff ffa5 	bl	8006df4 <sbrk_aligned>
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d02b      	beq.n	8006f06 <_malloc_r+0xd2>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	442b      	add	r3, r5
 8006eb2:	6023      	str	r3, [r4, #0]
 8006eb4:	e00e      	b.n	8006ed4 <_malloc_r+0xa0>
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	1b52      	subs	r2, r2, r5
 8006eba:	d41e      	bmi.n	8006efa <_malloc_r+0xc6>
 8006ebc:	2a0b      	cmp	r2, #11
 8006ebe:	d916      	bls.n	8006eee <_malloc_r+0xba>
 8006ec0:	1961      	adds	r1, r4, r5
 8006ec2:	42a3      	cmp	r3, r4
 8006ec4:	6025      	str	r5, [r4, #0]
 8006ec6:	bf18      	it	ne
 8006ec8:	6059      	strne	r1, [r3, #4]
 8006eca:	6863      	ldr	r3, [r4, #4]
 8006ecc:	bf08      	it	eq
 8006ece:	6031      	streq	r1, [r6, #0]
 8006ed0:	5162      	str	r2, [r4, r5]
 8006ed2:	604b      	str	r3, [r1, #4]
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f104 060b 	add.w	r6, r4, #11
 8006eda:	f000 f865 	bl	8006fa8 <__malloc_unlock>
 8006ede:	f026 0607 	bic.w	r6, r6, #7
 8006ee2:	1d23      	adds	r3, r4, #4
 8006ee4:	1af2      	subs	r2, r6, r3
 8006ee6:	d0b6      	beq.n	8006e56 <_malloc_r+0x22>
 8006ee8:	1b9b      	subs	r3, r3, r6
 8006eea:	50a3      	str	r3, [r4, r2]
 8006eec:	e7b3      	b.n	8006e56 <_malloc_r+0x22>
 8006eee:	6862      	ldr	r2, [r4, #4]
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	bf0c      	ite	eq
 8006ef4:	6032      	streq	r2, [r6, #0]
 8006ef6:	605a      	strne	r2, [r3, #4]
 8006ef8:	e7ec      	b.n	8006ed4 <_malloc_r+0xa0>
 8006efa:	4623      	mov	r3, r4
 8006efc:	6864      	ldr	r4, [r4, #4]
 8006efe:	e7b2      	b.n	8006e66 <_malloc_r+0x32>
 8006f00:	4634      	mov	r4, r6
 8006f02:	6876      	ldr	r6, [r6, #4]
 8006f04:	e7b9      	b.n	8006e7a <_malloc_r+0x46>
 8006f06:	230c      	movs	r3, #12
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	f000 f84c 	bl	8006fa8 <__malloc_unlock>
 8006f10:	e7a1      	b.n	8006e56 <_malloc_r+0x22>
 8006f12:	6025      	str	r5, [r4, #0]
 8006f14:	e7de      	b.n	8006ed4 <_malloc_r+0xa0>
 8006f16:	bf00      	nop
 8006f18:	20000690 	.word	0x20000690

08006f1c <_realloc_r>:
 8006f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f20:	4680      	mov	r8, r0
 8006f22:	4614      	mov	r4, r2
 8006f24:	460e      	mov	r6, r1
 8006f26:	b921      	cbnz	r1, 8006f32 <_realloc_r+0x16>
 8006f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	f7ff bf81 	b.w	8006e34 <_malloc_r>
 8006f32:	b92a      	cbnz	r2, 8006f40 <_realloc_r+0x24>
 8006f34:	f7ff ff12 	bl	8006d5c <_free_r>
 8006f38:	4625      	mov	r5, r4
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f40:	f000 f838 	bl	8006fb4 <_malloc_usable_size_r>
 8006f44:	4284      	cmp	r4, r0
 8006f46:	4607      	mov	r7, r0
 8006f48:	d802      	bhi.n	8006f50 <_realloc_r+0x34>
 8006f4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f4e:	d812      	bhi.n	8006f76 <_realloc_r+0x5a>
 8006f50:	4621      	mov	r1, r4
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7ff ff6e 	bl	8006e34 <_malloc_r>
 8006f58:	4605      	mov	r5, r0
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d0ed      	beq.n	8006f3a <_realloc_r+0x1e>
 8006f5e:	42bc      	cmp	r4, r7
 8006f60:	4622      	mov	r2, r4
 8006f62:	4631      	mov	r1, r6
 8006f64:	bf28      	it	cs
 8006f66:	463a      	movcs	r2, r7
 8006f68:	f7ff fed0 	bl	8006d0c <memcpy>
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	4640      	mov	r0, r8
 8006f70:	f7ff fef4 	bl	8006d5c <_free_r>
 8006f74:	e7e1      	b.n	8006f3a <_realloc_r+0x1e>
 8006f76:	4635      	mov	r5, r6
 8006f78:	e7df      	b.n	8006f3a <_realloc_r+0x1e>
	...

08006f7c <_sbrk_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4d06      	ldr	r5, [pc, #24]	; (8006f98 <_sbrk_r+0x1c>)
 8006f80:	2300      	movs	r3, #0
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	602b      	str	r3, [r5, #0]
 8006f88:	f7fb f96e 	bl	8002268 <_sbrk>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_sbrk_r+0x1a>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_sbrk_r+0x1a>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	20000698 	.word	0x20000698

08006f9c <__malloc_lock>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <__malloc_lock+0x8>)
 8006f9e:	f000 b811 	b.w	8006fc4 <__retarget_lock_acquire_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	2000069c 	.word	0x2000069c

08006fa8 <__malloc_unlock>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__malloc_unlock+0x8>)
 8006faa:	f000 b80c 	b.w	8006fc6 <__retarget_lock_release_recursive>
 8006fae:	bf00      	nop
 8006fb0:	2000069c 	.word	0x2000069c

08006fb4 <_malloc_usable_size_r>:
 8006fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb8:	1f18      	subs	r0, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bfbc      	itt	lt
 8006fbe:	580b      	ldrlt	r3, [r1, r0]
 8006fc0:	18c0      	addlt	r0, r0, r3
 8006fc2:	4770      	bx	lr

08006fc4 <__retarget_lock_acquire_recursive>:
 8006fc4:	4770      	bx	lr

08006fc6 <__retarget_lock_release_recursive>:
 8006fc6:	4770      	bx	lr

08006fc8 <_init>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr

08006fd4 <_fini>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	bf00      	nop
 8006fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fda:	bc08      	pop	{r3}
 8006fdc:	469e      	mov	lr, r3
 8006fde:	4770      	bx	lr
